{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Markdown Exec \u00a4 Utilities to execute code blocks in Markdown files. For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block. Requirements \u00a4 Markdown Exec requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12 Installation \u00a4 With pip : pip install markdown-exec Configuration \u00a4 This extension relies on the SuperFences extension of PyMdown Extensions . To allow execution of code blocks, configure a custom fence from Python: from markdown import Markdown from markdown_exec import formatter , validator Markdown ( extensions = [ \"pymdownx.superfences\" ], extension_configs = { \"pymdownx.superfences\" : { \"custom_fences\" : [ { \"name\" : \"python\" , \"class\" : \"python\" , \"validator\" : validator , \"format\" : formatter , } ] } } ) ...or in MkDocs configuration file, as a Markdown extension: # mkdocs.yml markdown_extensions : - pymdownx.superfences : custom_fences : - name : python class : python validator : !!python/name:markdown_exec.validator format : !!python/name:markdown_exec.formatter ...or in MkDocs configuration file, as a plugin: # mkdocs.yml plugins : - search - markdown-exec Usage \u00a4 You are now able to execute code blocks instead of displaying them: ```python exec=\"on\" print(\"Hello Markdown!\") ``` The exec option will be true for every possible value except 0 , no , off and false (case insensitive). To capture the output of your code, Markdown Exec patches the print function so that it writes to a buffer instead of standard output. See usage for more details, and the gallery for more examples!","title":"Overview"},{"location":"#markdown-exec","text":"Utilities to execute code blocks in Markdown files. For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block.","title":"Markdown Exec"},{"location":"#requirements","text":"Markdown Exec requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12","title":"Requirements"},{"location":"#installation","text":"With pip : pip install markdown-exec","title":"Installation"},{"location":"#configuration","text":"This extension relies on the SuperFences extension of PyMdown Extensions . To allow execution of code blocks, configure a custom fence from Python: from markdown import Markdown from markdown_exec import formatter , validator Markdown ( extensions = [ \"pymdownx.superfences\" ], extension_configs = { \"pymdownx.superfences\" : { \"custom_fences\" : [ { \"name\" : \"python\" , \"class\" : \"python\" , \"validator\" : validator , \"format\" : formatter , } ] } } ) ...or in MkDocs configuration file, as a Markdown extension: # mkdocs.yml markdown_extensions : - pymdownx.superfences : custom_fences : - name : python class : python validator : !!python/name:markdown_exec.validator format : !!python/name:markdown_exec.formatter ...or in MkDocs configuration file, as a plugin: # mkdocs.yml plugins : - search - markdown-exec","title":"Configuration"},{"location":"#usage","text":"You are now able to execute code blocks instead of displaying them: ```python exec=\"on\" print(\"Hello Markdown!\") ``` The exec option will be true for every possible value except 0 , no , off and false (case insensitive). To capture the output of your code, Markdown Exec patches the print function so that it writes to a buffer instead of standard output. See usage for more details, and the gallery for more examples!","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.2.0 - 2022-04-18 \u00a4 Compare with 0.1.0 Features \u00a4 Add ability to render using tabs ( 91a95ae by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2022-02-19 \u00a4 Compare with first commit Features \u00a4 Implement execution of code blocks ( 41c8d81 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#020-2022-04-18","text":"Compare with 0.1.0","title":"0.2.0 - 2022-04-18"},{"location":"changelog/#features","text":"Add ability to render using tabs ( 91a95ae by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#010-2022-02-19","text":"Compare with first commit","title":"0.1.0 - 2022-02-19"},{"location":"changelog/#features_1","text":"Implement execution of code blocks ( 41c8d81 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd markdown-exec make setup !!! note If it fails for some reason, you'll need to install PDM manually. You can install it with: ```bash python3 -m pip install --user pipx pipx install pdm ``` Now you can try running `make setup` again, or simply `pdm install`. You now have the dependencies installed. You can run the application with pdm run markdown-exec [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd markdown-exec make setup !!! note If it fails for some reason, you'll need to install PDM manually. You can install it with: ```bash python3 -m pip install --user pipx pipx install pdm ``` Now you can try running `make setup` again, or simply `pdm install`. You now have the dependencies installed. You can run the application with pdm run markdown-exec [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"These projects were used to build markdown-exec . Thank you! python | pdm | copier-pdm Runtime dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License importlib-metadata Read metadata from Python packages >=4.4; python_version < \"3.10\" 4.11.3 Apache Software License markdown Python implementation of Markdown. >=3.2 3.3.6 BSD License pymdown-extensions Extension pack for Python Markdown. >=9 9.4 MIT License typing-extensions Backported and Experimental Type Hints for Python 3.7+ >=3.6.4; python_version < \"3.8\" 4.2.0 Python Software Foundation License zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.8.0 MIT License Development dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup ~=1.4 1.5.0 Revised BSD License astor Read/rewrite/write Python ASTs >=0.8 0.8.1 BSD-3-Clause atomicwrites Atomic file writes. >=1.0; sys_platform == \"win32\" 1.4.0 ? attrs Classes Without Boilerplate >=19.2.0 21.4.0 MIT autoflake Removes unused imports and unused variables >=1.4 1.4 Expat License bandit Security oriented static analyser for python code. >=1.7.3 1.7.4 Apache-2.0 license black The uncompromising code formatter. >=21.10b0 22.3.0 MIT cached-property A decorator for caching properties in classes. ~=1.5; python_version < \"3.8\" 1.5.2 ? certifi Python package for providing Mozilla's CA Bundle. >=2017.4.17 2021.10.8 MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. ~=2.0.0; python_version >= \"3\" 2.0.12 MIT click Composable command line interface toolkit >=8.0.0 8.1.3 BSD-3-Clause colorama Cross-platform colored terminal text. ; platform_system == \"Windows\" 0.4.4 BSD commonmark Python parser for the CommonMark Markdown spec <0.10.0,>=0.9.0 0.9.1 BSD-3-Clause coverage Code coverage measurement for Python [toml]>=5.2.1 6.3.2 Apache 2.0 darglint A utility for ensuring Google-style docstrings stay up to date with the source code. >=1.8 1.8.1 MIT diagrams Diagram as Code >=0.21.1 0.21.1 MIT dparse A parser for Python dependency files >=0.5.1 0.5.1 MIT license duty A simple task runner. >=0.7 0.7.0 Other/Proprietary License execnet execnet: rapid multi-Python deployment >=1.1 1.9.0 MIT failprint Run a command, print its output only if it fails. ~=0.8 0.8.0 Other/Proprietary License flake8 the modular source code checker: pep8 pyflakes and co 3.9.2 MIT flake8-bandit Automated security testing with bandit and flake8. >=2.1 3.0.0 MIT flake8-black flake8 plugin to call black as a code style validator >=0.2 0.3.2 MIT flake8-bugbear A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. >=21.9 22.4.25 MIT flake8-builtins Check for python builtins being used as variables or parameters. >=1.5 1.5.3 GPL version 2 flake8-comprehensions A flake8 plugin to help you write better list/set/dict comprehensions. >=3.7 3.8.0 MIT flake8-docstrings Extension for flake8 which uses pydocstyle to check docstrings >=1.6 1.6.0 MIT License flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing <2.0.0,>=1.3.2 1.3.2 MIT flake8-polyfill Polyfill package for Flake8 plugins 1.0.2 MIT flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. >=1.5 1.6.0 MIT flake8-string-format string format checker, plugin for flake8 >=0.3 0.3.0 MIT License flake8-tidy-imports A flake8 plugin that helps you write tidier imports. >=4.5 4.6.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names >=0.0 0.0.5 MIT ghp-import Copy your docs directly to the gh-pages branch. >=1.0 2.0.2 Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. >=0.4 0.5.0 Other/Proprietary License gitdb Git Object Database <5,>=4.0.1 4.0.9 BSD License gitpython GitPython is a python library used to interact with Git repositories >=1.0.1 3.1.27 BSD graphviz Simple Python interface for Graphviz <0.20.0,>=0.13.2 0.19.2 MIT griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. >=0.11.1 0.18.0 ISC License (ISCL) idna Internationalized Domain Names in Applications (IDNA) <4,>=2.5; python_version >= \"3\" 3.3 BSD-3-Clause importlib-metadata Read metadata from Python packages ; python_version < \"3.8\" 4.11.3 Apache Software License iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT License isort A Python utility / library to sort Python imports. >=5.10 5.10.1 MIT jinja2 A very fast and expressive template engine. <4.0,>=2.10 3.1.2 BSD-3-Clause markdown Python implementation of Markdown. <4.0,>=3.3 3.3.6 BSD License markdown-callouts Markdown extension: a classier syntax for admonitions >=0.2.0 0.2.0 MIT markupsafe Safely add untrusted strings to HTML/XML markup. >=2.0 2.1.1 BSD-3-Clause mccabe McCabe checker, plugin for flake8 <0.7.0,>=0.6.0 0.6.1 Expat license mergedeep A deep merge function for \ud83d\udc0d. >=1.3.4 1.3.4 MIT License mkdocs Project documentation with Markdown. >=1.2 1.3.0 BSD mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. >=0.2 0.2.5 ISC License (ISCL) mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build >=0.3 0.3.4 MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML >=0.4 0.4.1 MIT mkdocs-material Documentation that simply works >=7.3 8.2.12 MIT mkdocs-material-extensions Extension pack for Python Markdown. >=1.0.3 1.0.3 MIT License mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page >=0.3 0.3.4 MIT mkdocstrings Automatic documentation from sources, for MkDocs. [python]>=0.18 0.18.1 ISC License (ISCL) mkdocstrings-python A Python handler for mkdocstrings. >=0.5.2 0.6.6 ISC License (ISCL) mypy Optional static typing for Python >=0.910 0.950 MIT License mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. >=0.4.3 0.4.3 MIT License packaging Core utilities for Python packages >=20.5 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. >=0.9.0 0.9.0 MPL 2.0 pbr Python Build Reasonableness !=2.1.0,>=2.0.0 5.8.1 Apache Software License pep8-naming Check PEP-8 naming conventions, plugin for flake8 >=0.12 0.12.1 Expat license platformdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". >=2 2.5.2 MIT License pluggy plugin and hook calling mechanisms for python <2.0,>=0.12 1.0.0 MIT ptyprocess Run a subprocess in a pseudo terminal ~=0.6; sys_platform != \"win32\" 0.7.0 ISC License (ISCL) py library with cross-python path, ini-parsing, io, code, log facilities >=1.8.2 1.11.0 MIT license pycodestyle Python style guide checker 2.7.0 Expat license pydeps Display module dependencies >=1.10.12 1.10.17 BSD pydocstyle Python docstring style checker >=2.1 6.1.1 MIT pyflakes passive checker of Python programs >=1.1.0 2.3.1 MIT pygments Pygments is a syntax highlighting package written in Python. >=2.12 2.12.0 BSD License pymdown-extensions Extension pack for Python Markdown. >=9.4 9.4 MIT License pyparsing pyparsing module - Classes and methods to define and execute parsing grammars !=3.0.5,>=2.0.2 3.0.8 MIT License pytest pytest: simple powerful testing with Python >=6.2 7.1.2 MIT pytest-cov Pytest plugin for measuring coverage. >=3.0 3.0.0 MIT pytest-forked run tests in isolated forked subprocesses 1.4.0 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. >=3.10 3.11.0 MIT pytest-sugar pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). >=0.9 0.9.4 BSD pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes >=2.4 2.5.0 MIT python-dateutil Extensions to the standard Python datetime module >=2.8.1 2.8.2 Dual License pyyaml YAML parser and emitter for Python >=3.10 6.0 MIT pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. >=0.1 0.1 MIT License requests Python HTTP for Humans. 2.27.1 Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal >=12.3.0 12.3.0 MIT safety Checks installed dependencies for known vulnerabilities. >=1.10 1.10.3 MIT license semver Python helper for Semantic Versioning (http://semver.org/) ~=2.13 2.13.0 BSD setuptools Easily download, build, install, upgrade, and uninstall Python packages 62.1.0 MIT License six Python 2 and 3 compatibility utilities >=1.5 1.16.0 MIT smmap A pure Python implementation of a sliding window memory map manager <6,>=3.0.1 5.0.0 BSD snowballstemmer This package provides 29 stemmers for 28 languages generated from Snowball algorithms. 2.2.0 BSD-3-Clause stdlib-list A list of Python Standard Libraries (2.6-7, 3.2-9). 0.8.0 MIT stevedore Manage dynamic plugins for Python applications >=1.20.0 3.5.0 Apache Software License termcolor ANSII Color formatting for output in terminal. >=1.1.0 1.1.0 MIT toml Python Library for Tom's Obvious, Minimal Language >=0.10 0.10.2 MIT tomli A lil' TOML parser >=1.1.0; python_version < \"3.11\" 2.0.1 MIT License typed-ast a fork of Python 2 and 3 ast modules with type comment support >=1.4.2; python_version < \"3.8\" and implementation_name == \"cpython\" 1.5.3 ? types-markdown Typing stubs for Markdown >=3.3 3.3.14 Apache-2.0 license types-toml Typing stubs for toml >=0.10 0.10.6 Apache-2.0 license typing-extensions Backported and Experimental Type Hints for Python 3.7+ >=3.10.0.0; python_version < \"3.10\" 4.2.0 Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <1.27,>=1.21.1 1.26.9 MIT watchdog Filesystem events monitoring >=2.0 2.1.7 Apache License 2.0 wps-light The strictest and most opinionated python linter ever (lighter fork). >=0.15 0.16.1 MIT zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.8.0 MIT License More credits from the author","title":"Credits"},{"location":"gallery/","text":"Diagrams (cloud/system architecture) \u00a4 Diagrams offers a nice way of building diagrams. It also bundles a number of images used to illustrate objects and concepts so you can build good-looking diagrams. By default, Diagrams tries to write the result on disk, so we prevent that by patching its render method, and by ignoring the FileNotFoundError that ensues. Then we use its internal dot object and its pipe method to store the diagram in a variable, as base64 encoded PNG data. Finally we output an HTML image with the base64 data. Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result, files which are not automatically added to the final site. Result Source Diagrams from base64 import b64encode from contextlib import suppress from diagrams import Diagram , setdiagram from diagrams.k8s.clusterconfig import HPA from diagrams.k8s.compute import Deployment , Pod , ReplicaSet from diagrams.k8s.network import Ingress , Service with suppress ( FileNotFoundError ): with Diagram ( \"Exposed Pod with 3 Replicas\" , show = False ) as diagram : diagram . render = lambda : None net = Ingress ( \"domain.com\" ) >> Service ( \"svc\" ) net >> [ Pod ( \"pod1\" ), Pod ( \"pod2\" ), Pod ( \"pod3\" )] << ReplicaSet ( \"rs\" ) << Deployment ( \"dp\" ) << HPA ( \"hpa\" ) png = b64encode ( diagram . dot . pipe ( format = \"png\" )) . decode () print ( f '<img src=\"data:image/png;base64, { png } \"/>' ) Python modules inter-dependencies \u00a4 This example uses pydeps to build a graph of interdependencies of your project's modules. Data is built and stored in a pydeps data structure, then translated to dot source, then rendered to SVG with Graphviz . In this example we also add links to the code reference in related nodes. Try clicking on the markdown_exec nodes! Note pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted, but you could make a function of it, put it in an importable script/module, and reuse it cleanly in your executed code blocks. Result Source G markdown markdown markdown_exec markdown_exec markdown->markdown_exec markdown_exec.python markdown_exec. python markdown->markdown_exec_python markdown_exec.rendering markdown_exec. rendering markdown->markdown_exec_rendering mkdocs_config_config_options mkdocs. config. config_options markdown->mkdocs_config_config_options markdown_core markdown.core markdown_core->markdown markdown_core->markdown_exec_python markdown_treeprocessors markdown. treeprocessors markdown_treeprocessors->markdown_core markdown_treeprocessors->markdown_exec_rendering markdown_exec_mkdocs_plugin markdown_exec. mkdocs_plugin markdown_exec_python->markdown_exec markdown_exec_rendering->markdown_exec_python markupsafe markupsafe markupsafe->markdown_exec_rendering mkdocs mkdocs mkdocs->markdown_exec_mkdocs_plugin mkdocs_config mkdocs.config mkdocs_config->markdown_exec_mkdocs_plugin mkdocs_plugins mkdocs.plugins mkdocs_config->mkdocs_plugins mkdocs_config_config_options->markdown_exec_mkdocs_plugin mkdocs_plugins->markdown_exec_mkdocs_plugin mkdocs_plugins->mkdocs_config_config_options pydeps module dependencies graph from pydeps import cli , colors , py2depgraph , dot from pydeps.pydeps import depgraph_to_dotsrc from pydeps.target import Target cli . verbose = cli . _not_verbose options = cli . parse_args ([ \"src/markdown_exec\" , \"--noshow\" ]) colors . START_COLOR = options [ \"start_color\" ] target = Target ( options [ \"fname\" ]) with target . chdir_work (): dep_graph = py2depgraph . py2dep ( target , ** options ) dot_src = depgraph_to_dotsrc ( target , dep_graph , ** options ) svg = dot . call_graphviz_dot ( dot_src , \"svg\" ) . decode () svg = \"\" . join ( svg . splitlines ()[ 6 :]) svg = svg . replace ( 'fill=\"white\"' , 'fill=\"transparent\"' ) reference = \"../reference\" modules = ( \"markdown_exec\" , \"markdown_exec.python\" , \"markdown_exec.rendering\" , ) for module in modules : svg_title = module . replace ( \".\" , \"_\" ) title_tag = f \"<title> { svg_title } </title>\" href = f \" { reference } / { module . replace ( '.' , '/' ) } /\" svg = svg . replace ( title_tag , f '<a href=\" { href } \"><title> { module } </title>' ) svg = svg . replace ( \"</text></g>\" , \"</text></a></g>\" ) print ( svg ) Code snippets (SVG) \u00a4 Rich allows to export syntax-highlighted code as SVG. Here we hardcode the code snippet we want to render, but we could instead include it from somewhere else using the pymdownx.snippets extension or by reading it dynamically from Python. We also prevent Rich from actually writing to the terminal. Result Source @font-face { font-family: \"Rich Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Rich Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .rich-svg-3828447696-terminal-wrapper span { display: inline-block; white-space: pre; vertical-align: top; font-size: 18px; font-family:'Rich Fira Code','Cascadia Code',Monaco,Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace; } .rich-svg-3828447696-terminal-wrapper a { text-decoration: none; color: inherit; } .rich-svg-3828447696-terminal-body .blink { animation: rich-svg-3828447696-blinker 1s infinite; } @keyframes rich-svg-3828447696-blinker { from { opacity: 1.0; } 50% { opacity: 0.3; } to { opacity: 1.0; } } .rich-svg-3828447696-terminal-wrapper { padding: 140px; padding-top: 100px; } .rich-svg-3828447696-terminal { position: relative; display: flex; flex-direction: column; align-items: center; background-color: #0c0c0c; border-radius: 14px; box-shadow: 0 0 0 1px #484848; } .rich-svg-3828447696-terminal:after { position: absolute; width: 100%; height: 100%; content: ''; border-radius: 14px; background: rgb(71,77,102); background: linear-gradient(90deg, #804D69 0%, #4E4B89 100%); transform: rotate(-4.5deg); z-index: -1; } .rich-svg-3828447696-terminal-header { position: relative; width: 100%; background-color: #2e2e2e; margin-bottom: 12px; font-weight: bold; border-radius: 14px 14px 0 0; color: #f2f2f2; font-size: 18px; box-shadow: inset 0px -1px 0px 0px #4e4e4e, inset 0px -4px 8px 0px #1a1a1a; } .rich-svg-3828447696-terminal-title-tab { display: inline-block; margin-top: 14px; margin-left: 124px; font-family: sans-serif; padding: 14px 28px; border-radius: 6px 6px 0 0; background-color: #0c0c0c; box-shadow: inset 0px 1px 0px 0px #4e4e4e, 0px -4px 4px 0px #1e1e1e, inset 1px 0px 0px 0px #4e4e4e, inset -1px 0px 0px 0px #4e4e4e; } .rich-svg-3828447696-terminal-traffic-lights { position: absolute; top: 24px; left: 20px; } .rich-svg-3828447696-terminal-body { line-height: 22px; padding: 14px; } .rich-svg-3828447696-terminal-body .r1 {color: #f2f2f2; text-decoration-color: #f2f2f2;background-color: #0c0c0c;} .rich-svg-3828447696-terminal-body .r2 {background-color: #263238;color: #f2f2f2; text-decoration-color: #f2f2f2;} .rich-svg-3828447696-terminal-body .r3 {color: #eeffff; text-decoration-color: #eeffff; background-color: #263238} .rich-svg-3828447696-terminal-body .r4 {color: #89ddff; text-decoration-color: #89ddff; background-color: #263238; font-style: italic} .rich-svg-3828447696-terminal-body .r5 {color: #ffcb6b; text-decoration-color: #ffcb6b; background-color: #263238} .rich-svg-3828447696-terminal-body .r6 {color: #bb80b3; text-decoration-color: #bb80b3; background-color: #263238} .rich-svg-3828447696-terminal-body .r7 {color: #89ddff; text-decoration-color: #89ddff; background-color: #263238} .rich-svg-3828447696-terminal-body .r8 {color: #82aaff; text-decoration-color: #82aaff; background-color: #263238} .rich-svg-3828447696-terminal-body .r9 {color: #c3e88d; text-decoration-color: #c3e88d; background-color: #263238} async context manager from contextlib import asynccontextmanager import httpx class BookClient ( httpx . AsyncClient ): async def get_book (self, book_id : int ) -> str : response = await self. get ( f \"/books/ { book_id } \" ) return response . text @asynccontextmanager async def book_client ( args , kwargs ): async with BookClient ( args , ** kwargs ) as client : yield client Rich SVG code snippet import os from rich.console import Console from rich.padding import Padding from rich.syntax import Syntax code = \"\"\" from contextlib import asynccontextmanager import httpx class BookClient(httpx.AsyncClient): async def get_book(self, book_id: int) -> str: response = await self.get(f\"/books/ {book_id} \") return response.text @asynccontextmanager async def book_client(*args, **kwargs): async with BookClient(*args, **kwargs) as client: yield client \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 65 , file = devnull , markup = False ) renderable = Syntax ( code , \"python\" , theme = \"material\" ) renderable = Padding ( renderable , ( 0 ,), expand = False ) console . print ( renderable , markup = False ) svg = console . export_svg ( title = \"async context manager\" ) print ( svg ) Python module output \u00a4 This example uses Python's runpy module to run another Python module. This other module's output is captured by temporarily patching sys.stdout with a text buffer. Result Source Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server runpy and script/module output import argparse import sys import warnings from contextlib import suppress from io import StringIO from runpy import run_module old_argv = list ( sys . argv ) sys . argv = [ \"mkdocs\" ] old_stdout = sys . stdout sys . stdout = StringIO () warnings . filterwarnings ( \"ignore\" , category = RuntimeWarning ) with suppress ( SystemExit ): run_module ( \"mkdocs\" , run_name = \"__main__\" ) output = sys . stdout . getvalue () sys . stdout = old_stdout sys . argv = old_argv print ( f \"``` \\n { output } \\n ```\" ) Python CLI documentation \u00a4 Argparse help message (code block) \u00a4 Instead of blindly running a module with runpy to get its help message, if you know the project is using argparse to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser. Result Source usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...] A simple task runner. positional arguments: remainder Global options: -d DUTIES_FILE, --duties-file DUTIES_FILE Python file where the duties are defined. -l, --list List the available duties. -h [DUTY ...], --help [DUTY ...] Show this help message and exit. Pass duties names to print their help. -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none} Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y, --pty Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y, --no-pty Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p, --progress Print progress while running a command. -P, --no-progress Don't print progress while running a command. -q, --quiet Don't print the command output, even if it failed. -Q, --no-quiet Print the command output when it fails. -s, --silent Don't print anything. -S, --no-silent Print output as usual. -z, --zero, --nofail Don't fail. Always return a success (0) exit code. -Z, --no-zero, --strict Return the original exit code. argparse parser help message from duty.cli import get_parser parser = get_parser () print ( f \"``` \\n { parser . format_help () } \\n ```\" ) Argparse parser documentation \u00a4 In this example, we inspect the argparse parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course. Result Source duty \u00a4 A simple task runner. Options: -d , --duties-file : Python file where the duties are defined.(default: duties.py) -l , --list : List the available duties. -h , --help DUTY : Show this help message and exit. Pass duties names to print their help. -c , --capture : Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f , --fmt , --format : Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y , --pty : Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y , --no-pty : Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p , --progress : Print progress while running a command. -P , --no-progress : Don't print progress while running a command. -q , --quiet : Don't print the command output, even if it failed. -Q , --no-quiet : Print the command output when it fails. -s , --silent : Don't print anything. -S , --no-silent : Print output as usual. -z , --zero , --nofail : Don't fail. Always return a success (0) exit code. -Z , --no-zero , --strict : Return the original exit code. CLI help using argparse parser import argparse from duty.cli import get_parser parser = get_parser () lines = [] lines . append ( f \"## duty\" ) if parser . description : lines . append ( parser . description ) lines . append ( \" \\n Options: \\n \" ) for action in parser . _actions : opts = [ f \"` { opt } `\" for opt in action . option_strings ] if not opts : continue line = \"- \" + \",\" . join ( opts ) if action . metavar : line += f \" ` { action . metavar } `\" line += f \": { action . help } \" if action . default and action . default != argparse . SUPPRESS : line += f \"(default: { action . default } )\" lines . append ( line ) print ( \" \\n \" . join ( lines ))","title":"Gallery"},{"location":"gallery/#diagrams-cloudsystem-architecture","text":"Diagrams offers a nice way of building diagrams. It also bundles a number of images used to illustrate objects and concepts so you can build good-looking diagrams. By default, Diagrams tries to write the result on disk, so we prevent that by patching its render method, and by ignoring the FileNotFoundError that ensues. Then we use its internal dot object and its pipe method to store the diagram in a variable, as base64 encoded PNG data. Finally we output an HTML image with the base64 data. Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result, files which are not automatically added to the final site. Result Source Diagrams from base64 import b64encode from contextlib import suppress from diagrams import Diagram , setdiagram from diagrams.k8s.clusterconfig import HPA from diagrams.k8s.compute import Deployment , Pod , ReplicaSet from diagrams.k8s.network import Ingress , Service with suppress ( FileNotFoundError ): with Diagram ( \"Exposed Pod with 3 Replicas\" , show = False ) as diagram : diagram . render = lambda : None net = Ingress ( \"domain.com\" ) >> Service ( \"svc\" ) net >> [ Pod ( \"pod1\" ), Pod ( \"pod2\" ), Pod ( \"pod3\" )] << ReplicaSet ( \"rs\" ) << Deployment ( \"dp\" ) << HPA ( \"hpa\" ) png = b64encode ( diagram . dot . pipe ( format = \"png\" )) . decode () print ( f '<img src=\"data:image/png;base64, { png } \"/>' )","title":"Diagrams (cloud/system architecture)"},{"location":"gallery/#python-modules-inter-dependencies","text":"This example uses pydeps to build a graph of interdependencies of your project's modules. Data is built and stored in a pydeps data structure, then translated to dot source, then rendered to SVG with Graphviz . In this example we also add links to the code reference in related nodes. Try clicking on the markdown_exec nodes! Note pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted, but you could make a function of it, put it in an importable script/module, and reuse it cleanly in your executed code blocks. Result Source G markdown markdown markdown_exec markdown_exec markdown->markdown_exec markdown_exec.python markdown_exec. python markdown->markdown_exec_python markdown_exec.rendering markdown_exec. rendering markdown->markdown_exec_rendering mkdocs_config_config_options mkdocs. config. config_options markdown->mkdocs_config_config_options markdown_core markdown.core markdown_core->markdown markdown_core->markdown_exec_python markdown_treeprocessors markdown. treeprocessors markdown_treeprocessors->markdown_core markdown_treeprocessors->markdown_exec_rendering markdown_exec_mkdocs_plugin markdown_exec. mkdocs_plugin markdown_exec_python->markdown_exec markdown_exec_rendering->markdown_exec_python markupsafe markupsafe markupsafe->markdown_exec_rendering mkdocs mkdocs mkdocs->markdown_exec_mkdocs_plugin mkdocs_config mkdocs.config mkdocs_config->markdown_exec_mkdocs_plugin mkdocs_plugins mkdocs.plugins mkdocs_config->mkdocs_plugins mkdocs_config_config_options->markdown_exec_mkdocs_plugin mkdocs_plugins->markdown_exec_mkdocs_plugin mkdocs_plugins->mkdocs_config_config_options pydeps module dependencies graph from pydeps import cli , colors , py2depgraph , dot from pydeps.pydeps import depgraph_to_dotsrc from pydeps.target import Target cli . verbose = cli . _not_verbose options = cli . parse_args ([ \"src/markdown_exec\" , \"--noshow\" ]) colors . START_COLOR = options [ \"start_color\" ] target = Target ( options [ \"fname\" ]) with target . chdir_work (): dep_graph = py2depgraph . py2dep ( target , ** options ) dot_src = depgraph_to_dotsrc ( target , dep_graph , ** options ) svg = dot . call_graphviz_dot ( dot_src , \"svg\" ) . decode () svg = \"\" . join ( svg . splitlines ()[ 6 :]) svg = svg . replace ( 'fill=\"white\"' , 'fill=\"transparent\"' ) reference = \"../reference\" modules = ( \"markdown_exec\" , \"markdown_exec.python\" , \"markdown_exec.rendering\" , ) for module in modules : svg_title = module . replace ( \".\" , \"_\" ) title_tag = f \"<title> { svg_title } </title>\" href = f \" { reference } / { module . replace ( '.' , '/' ) } /\" svg = svg . replace ( title_tag , f '<a href=\" { href } \"><title> { module } </title>' ) svg = svg . replace ( \"</text></g>\" , \"</text></a></g>\" ) print ( svg )","title":"Python modules inter-dependencies"},{"location":"gallery/#code-snippets-svg","text":"Rich allows to export syntax-highlighted code as SVG. Here we hardcode the code snippet we want to render, but we could instead include it from somewhere else using the pymdownx.snippets extension or by reading it dynamically from Python. We also prevent Rich from actually writing to the terminal. Result Source @font-face { font-family: \"Rich Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Rich Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .rich-svg-3828447696-terminal-wrapper span { display: inline-block; white-space: pre; vertical-align: top; font-size: 18px; font-family:'Rich Fira Code','Cascadia Code',Monaco,Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace; } .rich-svg-3828447696-terminal-wrapper a { text-decoration: none; color: inherit; } .rich-svg-3828447696-terminal-body .blink { animation: rich-svg-3828447696-blinker 1s infinite; } @keyframes rich-svg-3828447696-blinker { from { opacity: 1.0; } 50% { opacity: 0.3; } to { opacity: 1.0; } } .rich-svg-3828447696-terminal-wrapper { padding: 140px; padding-top: 100px; } .rich-svg-3828447696-terminal { position: relative; display: flex; flex-direction: column; align-items: center; background-color: #0c0c0c; border-radius: 14px; box-shadow: 0 0 0 1px #484848; } .rich-svg-3828447696-terminal:after { position: absolute; width: 100%; height: 100%; content: ''; border-radius: 14px; background: rgb(71,77,102); background: linear-gradient(90deg, #804D69 0%, #4E4B89 100%); transform: rotate(-4.5deg); z-index: -1; } .rich-svg-3828447696-terminal-header { position: relative; width: 100%; background-color: #2e2e2e; margin-bottom: 12px; font-weight: bold; border-radius: 14px 14px 0 0; color: #f2f2f2; font-size: 18px; box-shadow: inset 0px -1px 0px 0px #4e4e4e, inset 0px -4px 8px 0px #1a1a1a; } .rich-svg-3828447696-terminal-title-tab { display: inline-block; margin-top: 14px; margin-left: 124px; font-family: sans-serif; padding: 14px 28px; border-radius: 6px 6px 0 0; background-color: #0c0c0c; box-shadow: inset 0px 1px 0px 0px #4e4e4e, 0px -4px 4px 0px #1e1e1e, inset 1px 0px 0px 0px #4e4e4e, inset -1px 0px 0px 0px #4e4e4e; } .rich-svg-3828447696-terminal-traffic-lights { position: absolute; top: 24px; left: 20px; } .rich-svg-3828447696-terminal-body { line-height: 22px; padding: 14px; } .rich-svg-3828447696-terminal-body .r1 {color: #f2f2f2; text-decoration-color: #f2f2f2;background-color: #0c0c0c;} .rich-svg-3828447696-terminal-body .r2 {background-color: #263238;color: #f2f2f2; text-decoration-color: #f2f2f2;} .rich-svg-3828447696-terminal-body .r3 {color: #eeffff; text-decoration-color: #eeffff; background-color: #263238} .rich-svg-3828447696-terminal-body .r4 {color: #89ddff; text-decoration-color: #89ddff; background-color: #263238; font-style: italic} .rich-svg-3828447696-terminal-body .r5 {color: #ffcb6b; text-decoration-color: #ffcb6b; background-color: #263238} .rich-svg-3828447696-terminal-body .r6 {color: #bb80b3; text-decoration-color: #bb80b3; background-color: #263238} .rich-svg-3828447696-terminal-body .r7 {color: #89ddff; text-decoration-color: #89ddff; background-color: #263238} .rich-svg-3828447696-terminal-body .r8 {color: #82aaff; text-decoration-color: #82aaff; background-color: #263238} .rich-svg-3828447696-terminal-body .r9 {color: #c3e88d; text-decoration-color: #c3e88d; background-color: #263238} async context manager from contextlib import asynccontextmanager import httpx class BookClient ( httpx . AsyncClient ): async def get_book (self, book_id : int ) -> str : response = await self. get ( f \"/books/ { book_id } \" ) return response . text @asynccontextmanager async def book_client ( args , kwargs ): async with BookClient ( args , ** kwargs ) as client : yield client Rich SVG code snippet import os from rich.console import Console from rich.padding import Padding from rich.syntax import Syntax code = \"\"\" from contextlib import asynccontextmanager import httpx class BookClient(httpx.AsyncClient): async def get_book(self, book_id: int) -> str: response = await self.get(f\"/books/ {book_id} \") return response.text @asynccontextmanager async def book_client(*args, **kwargs): async with BookClient(*args, **kwargs) as client: yield client \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 65 , file = devnull , markup = False ) renderable = Syntax ( code , \"python\" , theme = \"material\" ) renderable = Padding ( renderable , ( 0 ,), expand = False ) console . print ( renderable , markup = False ) svg = console . export_svg ( title = \"async context manager\" ) print ( svg )","title":"Code snippets (SVG)"},{"location":"gallery/#python-module-output","text":"This example uses Python's runpy module to run another Python module. This other module's output is captured by temporarily patching sys.stdout with a text buffer. Result Source Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server runpy and script/module output import argparse import sys import warnings from contextlib import suppress from io import StringIO from runpy import run_module old_argv = list ( sys . argv ) sys . argv = [ \"mkdocs\" ] old_stdout = sys . stdout sys . stdout = StringIO () warnings . filterwarnings ( \"ignore\" , category = RuntimeWarning ) with suppress ( SystemExit ): run_module ( \"mkdocs\" , run_name = \"__main__\" ) output = sys . stdout . getvalue () sys . stdout = old_stdout sys . argv = old_argv print ( f \"``` \\n { output } \\n ```\" )","title":"Python module output"},{"location":"gallery/#python-cli-documentation","text":"","title":"Python CLI documentation"},{"location":"gallery/#argparse-help-message-code-block","text":"Instead of blindly running a module with runpy to get its help message, if you know the project is using argparse to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser. Result Source usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...] A simple task runner. positional arguments: remainder Global options: -d DUTIES_FILE, --duties-file DUTIES_FILE Python file where the duties are defined. -l, --list List the available duties. -h [DUTY ...], --help [DUTY ...] Show this help message and exit. Pass duties names to print their help. -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none} Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y, --pty Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y, --no-pty Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p, --progress Print progress while running a command. -P, --no-progress Don't print progress while running a command. -q, --quiet Don't print the command output, even if it failed. -Q, --no-quiet Print the command output when it fails. -s, --silent Don't print anything. -S, --no-silent Print output as usual. -z, --zero, --nofail Don't fail. Always return a success (0) exit code. -Z, --no-zero, --strict Return the original exit code. argparse parser help message from duty.cli import get_parser parser = get_parser () print ( f \"``` \\n { parser . format_help () } \\n ```\" )","title":"Argparse help message (code block)"},{"location":"gallery/#argparse-parser-documentation","text":"In this example, we inspect the argparse parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course. Result Source","title":"Argparse parser documentation"},{"location":"license/","text":"ISC License Copyright (c) 2022, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"usage/","text":"HTML vs. Markdown \u00a4 By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the html option to true. HTML Example: Markdown Rendered System information: ```python exec=\"true\" html=\"true\" import platform print( f\"\"\" <ul> <li>machine: <code>{platform.machine()}</code></li> <li>version: <code>{platform.version()}</code></li> <li>platform: <code>{platform.platform()}</code></li> <li>system: <code>{platform.system()}</code></li> </ul> \"\"\" ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT Wed, 27 Apr 2022 20:56:11 +0000 platform: Linux-5.17.5-arch1-1-x86_64-with-glibc2.35 system: Linux Markdown Example: Markdown Rendered System information: ```python exec=\"true\" import platform from textwrap import dedent print( # we must dedent, otherwise Markdown # will render it as a code block! dedent( f\"\"\" - machine: `{platform.machine()}` - version: `{platform.version()}` - platform: `{platform.platform()}` - system: `{platform.system()}` \"\"\" ) ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT Wed, 27 Apr 2022 20:56:11 +0000 platform: Linux-5.17.5-arch1-1-x86_64-with-glibc2.35 system: Linux Render the source code as well \u00a4 It's possible to render both the result of the executed code block and the code block itself. For this, use the source option with one of the following values: above : The source code will be rendered above the result. below : The source code will be rendered below the result. tabbed-left : The source code and result will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). tabbed-right : The result and source code will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). Source above: Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Source below: Markdown Rendered ```python exec=\"true\" source=\"below\" print(\"I'm the result!\") ``` I'm the result! print ( \"I'm the result!\" ) Tabbed on the left: Markdown Rendered ```python exec=\"true\" source=\"tabbed-left\" print(\"I'm the result!\") ``` Source Result print ( \"I'm the result!\" ) I'm the result! Tabbed on the right: Markdown Rendered ```python exec=\"true\" source=\"tabbed-right\" print(\"I'm the result!\") ``` Result Source I'm the result! print ( \"I'm the result!\" ) Change the titles of tabs \u00a4 In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the tabs option: Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\" print(\"I'm the result!\") ``` Source code Output print ( \"I'm the result!\" ) I'm the result! As you can see, titles are separated with a pipe | . Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with \\| : Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\|b | Boolean matrix\" print() print(\"a | b | a \\\\|\\\\| b\") print(\"--- | --- | ---\") for a in (True, False): for b in (True, False): print(f\"{a} | {b} | {a or b}\") print() ``` OR operator: a || b Boolean matrix print () print ( \"a | b | a \\\\ | \\\\ | b\" ) print ( \"--- | --- | ---\" ) for a in ( True , False ): for b in ( True , False ): print ( f \" { a } | { b } | { a or b } \" ) print () a b a || b True True True True False True False True True False False False Important The tabs option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well. Limitation Changing the title for only one tab is not supported. Additional options \u00a4 If you are using Material for MkDocs , you are probably familiar with the title option on code blocks: ```python title=\"setup.py\" from setuptools import setup setup(...) ``` Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally. Example: Markdown Rendered ```python exec=\"1\" source=\"above\" title=\"source.py\" print(\"I'm the result!\") ``` source.py print ( \"I'm the result!\" ) I'm the result!","title":"Usage"},{"location":"usage/#html-vs-markdown","text":"By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the html option to true. HTML Example: Markdown Rendered System information: ```python exec=\"true\" html=\"true\" import platform print( f\"\"\" <ul> <li>machine: <code>{platform.machine()}</code></li> <li>version: <code>{platform.version()}</code></li> <li>platform: <code>{platform.platform()}</code></li> <li>system: <code>{platform.system()}</code></li> </ul> \"\"\" ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT Wed, 27 Apr 2022 20:56:11 +0000 platform: Linux-5.17.5-arch1-1-x86_64-with-glibc2.35 system: Linux Markdown Example: Markdown Rendered System information: ```python exec=\"true\" import platform from textwrap import dedent print( # we must dedent, otherwise Markdown # will render it as a code block! dedent( f\"\"\" - machine: `{platform.machine()}` - version: `{platform.version()}` - platform: `{platform.platform()}` - system: `{platform.system()}` \"\"\" ) ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT Wed, 27 Apr 2022 20:56:11 +0000 platform: Linux-5.17.5-arch1-1-x86_64-with-glibc2.35 system: Linux","title":"HTML vs. Markdown"},{"location":"usage/#render-the-source-code-as-well","text":"It's possible to render both the result of the executed code block and the code block itself. For this, use the source option with one of the following values: above : The source code will be rendered above the result. below : The source code will be rendered below the result. tabbed-left : The source code and result will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). tabbed-right : The result and source code will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). Source above: Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Source below: Markdown Rendered ```python exec=\"true\" source=\"below\" print(\"I'm the result!\") ``` I'm the result! print ( \"I'm the result!\" ) Tabbed on the left: Markdown Rendered ```python exec=\"true\" source=\"tabbed-left\" print(\"I'm the result!\") ``` Source Result print ( \"I'm the result!\" ) I'm the result! Tabbed on the right: Markdown Rendered ```python exec=\"true\" source=\"tabbed-right\" print(\"I'm the result!\") ``` Result Source I'm the result! print ( \"I'm the result!\" )","title":"Render the source code as well"},{"location":"usage/#change-the-titles-of-tabs","text":"In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the tabs option: Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\" print(\"I'm the result!\") ``` Source code Output print ( \"I'm the result!\" ) I'm the result! As you can see, titles are separated with a pipe | . Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with \\| : Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\|b | Boolean matrix\" print() print(\"a | b | a \\\\|\\\\| b\") print(\"--- | --- | ---\") for a in (True, False): for b in (True, False): print(f\"{a} | {b} | {a or b}\") print() ``` OR operator: a || b Boolean matrix print () print ( \"a | b | a \\\\ | \\\\ | b\" ) print ( \"--- | --- | ---\" ) for a in ( True , False ): for b in ( True , False ): print ( f \" { a } | { b } | { a or b } \" ) print () a b a || b True True True True False True False True True False False False Important The tabs option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well. Limitation Changing the title for only one tab is not supported.","title":"Change the titles of tabs"},{"location":"usage/#additional-options","text":"If you are using Material for MkDocs , you are probably familiar with the title option on code blocks: ```python title=\"setup.py\" from setuptools import setup setup(...) ``` Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally. Example: Markdown Rendered ```python exec=\"1\" source=\"above\" title=\"source.py\" print(\"I'm the result!\") ``` source.py print ( \"I'm the result!\" ) I'm the result!","title":"Additional options"},{"location":"reference/SUMMARY/","text":"markdown_exec mkdocs_plugin python rendering","title":"SUMMARY"},{"location":"reference/markdown_exec/","text":"Markdown Exec package. Utilities to execute code blocks in Markdown files. formatter ( source , language , css_class , options , md , classes = None , id_value = '' , attrs = None , ** kwargs ) \u00a4 Execute code and return HTML. Parameters: Name Type Description Default source str The code to execute. required language str The code language, like python or bash. required css_class str The CSS class to add to the HTML element. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] | None The container for attrs: None md Markdown The Markdown instance. required classes list [ str ] | None Additional CSS classes. None id_value str An optional HTML id. '' attrs dict [ str , Any ] | None Additional attributes None **kwargs Any Additional arguments passed to SuperFences default formatters. {} Returns: Type Description str HTML contents. Source code in markdown_exec/__init__.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def formatter ( source : str , language : str , css_class : str , options : dict [ str , Any ], md : Markdown , classes : list [ str ] | None = None , id_value : str = \"\" , attrs : dict [ str , Any ] | None = None , ** kwargs : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: source: The code to execute. language: The code language, like python or bash. css_class: The CSS class to add to the HTML element. options: The container for options. attrs: The container for attrs: md: The Markdown instance. classes: Additional CSS classes. id_value: An optional HTML id. attrs: Additional attributes **kwargs: Additional arguments passed to SuperFences default formatters. Returns: HTML contents. \"\"\" fmt = _formatters . get ( language , lambda source , * args , ** kwargs : source ) return fmt ( source , md , ** options ) validator ( language , inputs , options , attrs , md ) \u00a4 Validate code blocks inputs. Parameters: Name Type Description Default language str The code language, like python or bash. required inputs dict [ str , str ] The code block inputs, to be sorted into options and attrs. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] The container for attrs: required md Markdown The Markdown instance. required Returns: Type Description bool Success or not. Source code in markdown_exec/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def validator ( language : str , inputs : dict [ str , str ], options : dict [ str , Any ], attrs : dict [ str , Any ], md : Markdown ) -> bool : \"\"\"Validate code blocks inputs. Parameters: language: The code language, like python or bash. inputs: The code block inputs, to be sorted into options and attrs. options: The container for options. attrs: The container for attrs: md: The Markdown instance. Returns: Success or not. \"\"\" exec_value = _to_bool ( inputs . pop ( \"exec\" , \"no\" )) if not exec_value : return False html_value = _to_bool ( inputs . pop ( \"html\" , \"no\" )) source_value = inputs . pop ( \"source\" , \"\" ) tabs_value = inputs . pop ( \"tabs\" , \"Source|Result\" ) tabs = tuple ( _tabs_re . split ( tabs_value , maxsplit = 1 )) options [ \"exec\" ] = exec_value options [ \"html\" ] = html_value options [ \"source\" ] = source_value options [ \"tabs\" ] = tabs options [ \"extra\" ] = inputs return True","title":"markdown_exec"},{"location":"reference/markdown_exec/#markdown_exec.formatter","text":"Execute code and return HTML. Parameters: Name Type Description Default source str The code to execute. required language str The code language, like python or bash. required css_class str The CSS class to add to the HTML element. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] | None The container for attrs: None md Markdown The Markdown instance. required classes list [ str ] | None Additional CSS classes. None id_value str An optional HTML id. '' attrs dict [ str , Any ] | None Additional attributes None **kwargs Any Additional arguments passed to SuperFences default formatters. {} Returns: Type Description str HTML contents. Source code in markdown_exec/__init__.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def formatter ( source : str , language : str , css_class : str , options : dict [ str , Any ], md : Markdown , classes : list [ str ] | None = None , id_value : str = \"\" , attrs : dict [ str , Any ] | None = None , ** kwargs : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: source: The code to execute. language: The code language, like python or bash. css_class: The CSS class to add to the HTML element. options: The container for options. attrs: The container for attrs: md: The Markdown instance. classes: Additional CSS classes. id_value: An optional HTML id. attrs: Additional attributes **kwargs: Additional arguments passed to SuperFences default formatters. Returns: HTML contents. \"\"\" fmt = _formatters . get ( language , lambda source , * args , ** kwargs : source ) return fmt ( source , md , ** options )","title":"formatter()"},{"location":"reference/markdown_exec/#markdown_exec.validator","text":"Validate code blocks inputs. Parameters: Name Type Description Default language str The code language, like python or bash. required inputs dict [ str , str ] The code block inputs, to be sorted into options and attrs. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] The container for attrs: required md Markdown The Markdown instance. required Returns: Type Description bool Success or not. Source code in markdown_exec/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def validator ( language : str , inputs : dict [ str , str ], options : dict [ str , Any ], attrs : dict [ str , Any ], md : Markdown ) -> bool : \"\"\"Validate code blocks inputs. Parameters: language: The code language, like python or bash. inputs: The code block inputs, to be sorted into options and attrs. options: The container for options. attrs: The container for attrs: md: The Markdown instance. Returns: Success or not. \"\"\" exec_value = _to_bool ( inputs . pop ( \"exec\" , \"no\" )) if not exec_value : return False html_value = _to_bool ( inputs . pop ( \"html\" , \"no\" )) source_value = inputs . pop ( \"source\" , \"\" ) tabs_value = inputs . pop ( \"tabs\" , \"Source|Result\" ) tabs = tuple ( _tabs_re . split ( tabs_value , maxsplit = 1 )) options [ \"exec\" ] = exec_value options [ \"html\" ] = html_value options [ \"source\" ] = source_value options [ \"tabs\" ] = tabs options [ \"extra\" ] = inputs return True","title":"validator()"},{"location":"reference/markdown_exec/mkdocs_plugin/","text":"This module contains an optional plugin for MkDocs. MarkdownExecPlugin \u00a4 Bases: BasePlugin MkDocs plugin to easily enable custom fences for code blocks execution.","title":"mkdocs_plugin"},{"location":"reference/markdown_exec/mkdocs_plugin/#markdown_exec.mkdocs_plugin.MarkdownExecPlugin","text":"Bases: BasePlugin MkDocs plugin to easily enable custom fences for code blocks execution.","title":"MarkdownExecPlugin"},{"location":"reference/markdown_exec/python/","text":"Formatter and utils for executing Python code. buffer_print ( buffer , * text , end = ' \\n ' , ** kwargs ) \u00a4 Print Markdown. Parameters: Name Type Description Default buffer StringIO A string buffer to write into. required *text str The text to write into the buffer. Multiple strings accepted. () end str The string to write at the end. '\\n' **kwargs Any Other keyword arguments passed to print are ignored. {} Source code in markdown_exec/python.py 15 16 17 18 19 20 21 22 23 24 def buffer_print ( buffer : StringIO , * text : str , end : str = \" \\n \" , ** kwargs : Any ) -> None : \"\"\"Print Markdown. Parameters: buffer: A string buffer to write into. *text: The text to write into the buffer. Multiple strings accepted. end: The string to write at the end. **kwargs: Other keyword arguments passed to `print` are ignored. \"\"\" buffer . write ( \" \" . join ( text ) + end ) exec_python ( code , md , html , source , tabs , ** options ) \u00a4 Execute code and return HTML. Parameters: Name Type Description Default code str The code to execute. required md Markdown The Markdown instance. required html bool Whether to inject output as HTML directly, without rendering. required source str Whether to show source as well, and where. required tabs tuple [ str , str ] Titles of tabs (if used). required **options Any Additional options passed from the formatter. {} Returns: Type Description str HTML contents. Source code in markdown_exec/python.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def exec_python ( # noqa: WPS231 code : str , md : Markdown , html : bool , source : str , tabs : tuple [ str , str ], ** options : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: code: The code to execute. md: The Markdown instance. html: Whether to inject output as HTML directly, without rendering. source: Whether to show source as well, and where. tabs: Titles of tabs (if used). **options: Additional options passed from the formatter. Returns: HTML contents. \"\"\" markdown . mimic ( md ) source_tab_title , result_tab_title = tabs extra = options . get ( \"extra\" , {}) buffer = StringIO () exec_globals = { \"print\" : partial ( buffer_print , buffer )} try : exec ( code , {}, exec_globals ) # noqa: S102 except Exception as error : trace = traceback . TracebackException . from_exception ( error ) for frame in trace . stack : if frame . filename == \"<string>\" : frame . filename = \"<executed code block>\" frame . _line = code . split ( \" \\n \" )[ frame . lineno - 1 ] # type: ignore[attr-defined,operator] # noqa: WPS437 output = code_block ( \"python\" , \"\" . join ( trace . format ()), ** extra ) else : output = buffer . getvalue () if html : output = f '<div markdown=\"0\"> { str ( output ) } </div>' if source : source_block = code_block ( \"python\" , code , ** extra ) if source == \"above\" : output = source_block + \" \\n\\n \" + output elif source == \"below\" : output = output + \" \\n\\n \" + source_block elif source == \"tabbed-left\" : output = tabbed (( source_tab_title , source_block ), ( result_tab_title , output )) elif source == \"tabbed-right\" : output = tabbed (( result_tab_title , output ), ( source_tab_title , source_block )) return markdown . convert ( output )","title":"python"},{"location":"reference/markdown_exec/python/#markdown_exec.python.buffer_print","text":"Print Markdown. Parameters: Name Type Description Default buffer StringIO A string buffer to write into. required *text str The text to write into the buffer. Multiple strings accepted. () end str The string to write at the end. '\\n' **kwargs Any Other keyword arguments passed to print are ignored. {} Source code in markdown_exec/python.py 15 16 17 18 19 20 21 22 23 24 def buffer_print ( buffer : StringIO , * text : str , end : str = \" \\n \" , ** kwargs : Any ) -> None : \"\"\"Print Markdown. Parameters: buffer: A string buffer to write into. *text: The text to write into the buffer. Multiple strings accepted. end: The string to write at the end. **kwargs: Other keyword arguments passed to `print` are ignored. \"\"\" buffer . write ( \" \" . join ( text ) + end )","title":"buffer_print()"},{"location":"reference/markdown_exec/python/#markdown_exec.python.exec_python","text":"Execute code and return HTML. Parameters: Name Type Description Default code str The code to execute. required md Markdown The Markdown instance. required html bool Whether to inject output as HTML directly, without rendering. required source str Whether to show source as well, and where. required tabs tuple [ str , str ] Titles of tabs (if used). required **options Any Additional options passed from the formatter. {} Returns: Type Description str HTML contents. Source code in markdown_exec/python.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def exec_python ( # noqa: WPS231 code : str , md : Markdown , html : bool , source : str , tabs : tuple [ str , str ], ** options : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: code: The code to execute. md: The Markdown instance. html: Whether to inject output as HTML directly, without rendering. source: Whether to show source as well, and where. tabs: Titles of tabs (if used). **options: Additional options passed from the formatter. Returns: HTML contents. \"\"\" markdown . mimic ( md ) source_tab_title , result_tab_title = tabs extra = options . get ( \"extra\" , {}) buffer = StringIO () exec_globals = { \"print\" : partial ( buffer_print , buffer )} try : exec ( code , {}, exec_globals ) # noqa: S102 except Exception as error : trace = traceback . TracebackException . from_exception ( error ) for frame in trace . stack : if frame . filename == \"<string>\" : frame . filename = \"<executed code block>\" frame . _line = code . split ( \" \\n \" )[ frame . lineno - 1 ] # type: ignore[attr-defined,operator] # noqa: WPS437 output = code_block ( \"python\" , \"\" . join ( trace . format ()), ** extra ) else : output = buffer . getvalue () if html : output = f '<div markdown=\"0\"> { str ( output ) } </div>' if source : source_block = code_block ( \"python\" , code , ** extra ) if source == \"above\" : output = source_block + \" \\n\\n \" + output elif source == \"below\" : output = output + \" \\n\\n \" + source_block elif source == \"tabbed-left\" : output = tabbed (( source_tab_title , source_block ), ( result_tab_title , output )) elif source == \"tabbed-right\" : output = tabbed (( result_tab_title , output ), ( source_tab_title , source_block )) return markdown . convert ( output )","title":"exec_python()"},{"location":"reference/markdown_exec/rendering/","text":"Markdown extensions and helpers. _IdPrependingTreeprocessor ( md , id_prefix ) \u00a4 Bases: Treeprocessor Prepend the configured prefix to IDs of all HTML elements. Source code in markdown_exec/rendering.py 52 53 54 def __init__ ( self , md : Markdown , id_prefix : str ): # noqa: D107 super () . __init__ ( md ) self . id_prefix = id_prefix _MarkdownConverter () \u00a4 Helper class to avoid breaking the original Markdown instance state. Source code in markdown_exec/rendering.py 81 82 83 def __init__ ( self ) -> None : # noqa: D107 self . md : Markdown = None # type: ignore[assignment] self . counter : int = 0 convert ( text ) \u00a4 Convert Markdown text to safe HTML. Parameters: Name Type Description Default text str Markdown text. required Returns: Type Description Markup Safe HTML. Source code in markdown_exec/rendering.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def convert ( self , text : str ) -> Markup : \"\"\"Convert Markdown text to safe HTML. Parameters: text: Markdown text. Returns: Safe HTML. \"\"\" self . md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = f \"exec- { self . counter } --\" self . counter += 1 try : # noqa: WPS501 return Markup ( self . md . convert ( text )) finally : self . md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = \"\" mimic ( md ) \u00a4 Mimic the passed Markdown instance by registering the same extensions. Parameters: Name Type Description Default md Markdown A Markdown instance. required Source code in markdown_exec/rendering.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def mimic ( self , md : Markdown ) -> None : \"\"\"Mimic the passed Markdown instance by registering the same extensions. Parameters: md: A Markdown instance. \"\"\" if self . md is None : self . md = Markdown () # noqa: WPS442 self . md . registerExtensions ( md . registeredExtensions + [ \"pymdownx.extra\" ], {}) self . md . treeprocessors . register ( _IdPrependingTreeprocessor ( md , \"\" ), _IdPrependingTreeprocessor . name , priority = 4 , # right after 'toc' (needed because that extension adds ids to headers) ) code_block ( language , code , ** options ) \u00a4 Format code as a code block. Parameters: Name Type Description Default language str The code block language. required code str The source code to format. required **options str Additional options passed from the source, to add back to the generated code block. {} Returns: Type Description str The formatted code block. Source code in markdown_exec/rendering.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def code_block ( language : str , code : str , ** options : str ) -> str : \"\"\"Format code as a code block. Parameters: language: The code block language. code: The source code to format. **options: Additional options passed from the source, to add back to the generated code block. Returns: The formatted code block. \"\"\" opts = \" \" . join ( f ' { opt_name } =\" { opt_value } \"' for opt_name , opt_value in options . items ()) return f \"``` { language } { opts } \\n { code } \\n ```\" tabbed ( * tabs ) \u00a4 Format tabs using pymdownx.tabbed extension. Parameters: Name Type Description Default *tabs tuple [ str , str ] Tuples of strings: title and text. () Returns: Type Description str The formatted tabs. Source code in markdown_exec/rendering.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def tabbed ( * tabs : tuple [ str , str ]) -> str : \"\"\"Format tabs using `pymdownx.tabbed` extension. Parameters: *tabs: Tuples of strings: title and text. Returns: The formatted tabs. \"\"\" parts = [] for title , text in tabs : title = title . replace ( r \"\\|\" , \"|\" ) . strip () parts . append ( f '=== \" { title } \"' ) parts . append ( indent ( text , prefix = \" \" * 4 )) parts . append ( \"\" ) return \" \\n \" . join ( parts )","title":"rendering"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering._IdPrependingTreeprocessor","text":"Bases: Treeprocessor Prepend the configured prefix to IDs of all HTML elements. Source code in markdown_exec/rendering.py 52 53 54 def __init__ ( self , md : Markdown , id_prefix : str ): # noqa: D107 super () . __init__ ( md ) self . id_prefix = id_prefix","title":"_IdPrependingTreeprocessor"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering._MarkdownConverter","text":"Helper class to avoid breaking the original Markdown instance state. Source code in markdown_exec/rendering.py 81 82 83 def __init__ ( self ) -> None : # noqa: D107 self . md : Markdown = None # type: ignore[assignment] self . counter : int = 0","title":"_MarkdownConverter"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering._MarkdownConverter.convert","text":"Convert Markdown text to safe HTML. Parameters: Name Type Description Default text str Markdown text. required Returns: Type Description Markup Safe HTML. Source code in markdown_exec/rendering.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def convert ( self , text : str ) -> Markup : \"\"\"Convert Markdown text to safe HTML. Parameters: text: Markdown text. Returns: Safe HTML. \"\"\" self . md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = f \"exec- { self . counter } --\" self . counter += 1 try : # noqa: WPS501 return Markup ( self . md . convert ( text )) finally : self . md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = \"\"","title":"convert()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering._MarkdownConverter.mimic","text":"Mimic the passed Markdown instance by registering the same extensions. Parameters: Name Type Description Default md Markdown A Markdown instance. required Source code in markdown_exec/rendering.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def mimic ( self , md : Markdown ) -> None : \"\"\"Mimic the passed Markdown instance by registering the same extensions. Parameters: md: A Markdown instance. \"\"\" if self . md is None : self . md = Markdown () # noqa: WPS442 self . md . registerExtensions ( md . registeredExtensions + [ \"pymdownx.extra\" ], {}) self . md . treeprocessors . register ( _IdPrependingTreeprocessor ( md , \"\" ), _IdPrependingTreeprocessor . name , priority = 4 , # right after 'toc' (needed because that extension adds ids to headers) )","title":"mimic()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.code_block","text":"Format code as a code block. Parameters: Name Type Description Default language str The code block language. required code str The source code to format. required **options str Additional options passed from the source, to add back to the generated code block. {} Returns: Type Description str The formatted code block. Source code in markdown_exec/rendering.py 13 14 15 16 17 18 19 20 21 22 23 24 25 def code_block ( language : str , code : str , ** options : str ) -> str : \"\"\"Format code as a code block. Parameters: language: The code block language. code: The source code to format. **options: Additional options passed from the source, to add back to the generated code block. Returns: The formatted code block. \"\"\" opts = \" \" . join ( f ' { opt_name } =\" { opt_value } \"' for opt_name , opt_value in options . items ()) return f \"``` { language } { opts } \\n { code } \\n ```\"","title":"code_block()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.tabbed","text":"Format tabs using pymdownx.tabbed extension. Parameters: Name Type Description Default *tabs tuple [ str , str ] Tuples of strings: title and text. () Returns: Type Description str The formatted tabs. Source code in markdown_exec/rendering.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def tabbed ( * tabs : tuple [ str , str ]) -> str : \"\"\"Format tabs using `pymdownx.tabbed` extension. Parameters: *tabs: Tuples of strings: title and text. Returns: The formatted tabs. \"\"\" parts = [] for title , text in tabs : title = title . replace ( r \"\\|\" , \"|\" ) . strip () parts . append ( f '=== \" { title } \"' ) parts . append ( indent ( text , prefix = \" \" * 4 )) parts . append ( \"\" ) return \" \\n \" . join ( parts )","title":"tabbed()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}