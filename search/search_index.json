{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Markdown Exec \u00a4 Utilities to execute code blocks in Markdown files. For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block. Installation \u00a4 With pip : pip install markdown-exec Configuration \u00a4 This extension relies on the SuperFences extension of PyMdown Extensions . To allow execution of code blocks, configure a custom fence from Python: from markdown import Markdown from markdown_exec import formatter , validator Markdown ( extensions = [ \"pymdownx.superfences\" ], extension_configs = { \"pymdownx.superfences\" : { \"custom_fences\" : [ { \"name\" : \"python\" , \"class\" : \"python\" , \"validator\" : validator , \"format\" : formatter , } ] } } ) ...or in MkDocs configuration file, as a Markdown extension: # mkdocs.yml markdown_extensions : - pymdownx.superfences : custom_fences : - name : python class : python validator : !!python/name:markdown_exec.validator format : !!python/name:markdown_exec.formatter ...or in MkDocs configuration file, as a plugin: # mkdocs.yml plugins : - search - markdown-exec Usage \u00a4 You are now able to execute code blocks instead of displaying them: ```python exec=\"on\" print(\"Hello Markdown!\") ``` The exec option will be true for every possible value except 0 , no , off and false (case insensitive). To capture the output of your code, Markdown Exec patches the print function so that it writes to a buffer instead of standard output. See usage for more details, and the gallery for more examples!","title":"Overview"},{"location":"#markdown-exec","text":"Utilities to execute code blocks in Markdown files. For example, you write a Python code block that computes some HTML, and this HTML is injected in place of the code block.","title":"Markdown Exec"},{"location":"#installation","text":"With pip : pip install markdown-exec","title":"Installation"},{"location":"#configuration","text":"This extension relies on the SuperFences extension of PyMdown Extensions . To allow execution of code blocks, configure a custom fence from Python: from markdown import Markdown from markdown_exec import formatter , validator Markdown ( extensions = [ \"pymdownx.superfences\" ], extension_configs = { \"pymdownx.superfences\" : { \"custom_fences\" : [ { \"name\" : \"python\" , \"class\" : \"python\" , \"validator\" : validator , \"format\" : formatter , } ] } } ) ...or in MkDocs configuration file, as a Markdown extension: # mkdocs.yml markdown_extensions : - pymdownx.superfences : custom_fences : - name : python class : python validator : !!python/name:markdown_exec.validator format : !!python/name:markdown_exec.formatter ...or in MkDocs configuration file, as a plugin: # mkdocs.yml plugins : - search - markdown-exec","title":"Configuration"},{"location":"#usage","text":"You are now able to execute code blocks instead of displaying them: ```python exec=\"on\" print(\"Hello Markdown!\") ``` The exec option will be true for every possible value except 0 , no , off and false (case insensitive). To capture the output of your code, Markdown Exec patches the print function so that it writes to a buffer instead of standard output. See usage for more details, and the gallery for more examples!","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.7.4 - 2022-11-13 \u00a4 Compare with 0.7.3 Bug Fixes \u00a4 Render source for non-HTML output (regression) ( 3028dcd by Timoth\u00e9e Mazzucotelli). 0.7.3 - 2022-11-13 \u00a4 Compare with 0.7.2 Bug Fixes \u00a4 Don't wrap HTML in p tag ( 420d79d by Timoth\u00e9e Mazzucotelli). 0.7.2 - 2022-09-01 \u00a4 Compare with 0.7.1 Bug Fixes \u00a4 Make tree formatter forward extra options ( 54996a9 by Timoth\u00e9e Mazzucotelli). Fix race condition issue ( 37d7f86 by Timoth\u00e9e Mazzucotelli). 0.7.1 - 2022-08-28 \u00a4 Compare with 0.7.0 Bug Fixes \u00a4 Allow printing non-string objects ( ceaa482 by Timoth\u00e9e Mazzucotelli). Issue #7 0.7.0 - 2022-05-28 \u00a4 Compare with 0.6.0 Features \u00a4 Add ability to hide source lines ( 3cb1934 by Timoth\u00e9e Mazzucotelli). 0.6.0 - 2022-05-21 \u00a4 Compare with 0.5.0 Features \u00a4 Add tree formatter ( 8096990 by Timoth\u00e9e Mazzucotelli). Handle code blocks execution errors and log warnings ( 34e16db by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Fix Python execution to support nested scopes ( 74b9a95 by Timoth\u00e9e Mazzucotelli). 0.5.0 - 2022-05-09 \u00a4 Compare with 0.4.0 Features \u00a4 Allow wrapping result in code block ( 37201e4 by Timoth\u00e9e Mazzucotelli). Add support for shell code blocks ( f2b4b67 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Fetch plugin languages from dict ( de8309e by Timoth\u00e9e Mazzucotelli). Add reusable base formatter ( c265bee by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2022-05-09 \u00a4 Compare with 0.3.1 Features \u00a4 Add literate Markdown support ( 8d3ed7e by Timoth\u00e9e Mazzucotelli). Add material-block style to show source ( ff10ee1 by Timoth\u00e9e Mazzucotelli). Support up to 8 levels of exec code block nesting ( bfde808 by Timoth\u00e9e Mazzucotelli). 0.3.1 - 2022-05-07 \u00a4 Compare with 0.3.0 Bug Fixes \u00a4 Actually prevent HTML re-rendering ( 4374852 by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2022-05-01 \u00a4 Compare with 0.2.0 Features \u00a4 Support pycon code blocks ( 2c86394 by Timoth\u00e9e Mazzucotelli). Add console source integration option ( 62dfd74 by Timoth\u00e9e Mazzucotelli). Provide a MkDocs plugin for easier setup ( 5fce814 by Timoth\u00e9e Mazzucotelli). Support changing tabs titles ( d150596 by Timoth\u00e9e Mazzucotelli). Allow using print in code blocks ( 7c124fd by Timoth\u00e9e Mazzucotelli). Allow passing extra opts like title to source code blocks ( bb3252a by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Split Python formatter to allow reuse ( fc56702 by Timoth\u00e9e Mazzucotelli). Setup a more robust Markdown converter ( 395f4c4 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2022-04-18 \u00a4 Compare with 0.1.0 Features \u00a4 Add ability to render using tabs ( 91a95ae by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2022-02-19 \u00a4 Compare with first commit Features \u00a4 Implement execution of code blocks ( 41c8d81 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#074-2022-11-13","text":"Compare with 0.7.3","title":"0.7.4 - 2022-11-13"},{"location":"changelog/#bug-fixes","text":"Render source for non-HTML output (regression) ( 3028dcd by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#073-2022-11-13","text":"Compare with 0.7.2","title":"0.7.3 - 2022-11-13"},{"location":"changelog/#bug-fixes_1","text":"Don't wrap HTML in p tag ( 420d79d by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#072-2022-09-01","text":"Compare with 0.7.1","title":"0.7.2 - 2022-09-01"},{"location":"changelog/#bug-fixes_2","text":"Make tree formatter forward extra options ( 54996a9 by Timoth\u00e9e Mazzucotelli). Fix race condition issue ( 37d7f86 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#071-2022-08-28","text":"Compare with 0.7.0","title":"0.7.1 - 2022-08-28"},{"location":"changelog/#bug-fixes_3","text":"Allow printing non-string objects ( ceaa482 by Timoth\u00e9e Mazzucotelli). Issue #7","title":"Bug Fixes"},{"location":"changelog/#070-2022-05-28","text":"Compare with 0.6.0","title":"0.7.0 - 2022-05-28"},{"location":"changelog/#features","text":"Add ability to hide source lines ( 3cb1934 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#060-2022-05-21","text":"Compare with 0.5.0","title":"0.6.0 - 2022-05-21"},{"location":"changelog/#features_1","text":"Add tree formatter ( 8096990 by Timoth\u00e9e Mazzucotelli). Handle code blocks execution errors and log warnings ( 34e16db by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes_4","text":"Fix Python execution to support nested scopes ( 74b9a95 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#050-2022-05-09","text":"Compare with 0.4.0","title":"0.5.0 - 2022-05-09"},{"location":"changelog/#features_2","text":"Allow wrapping result in code block ( 37201e4 by Timoth\u00e9e Mazzucotelli). Add support for shell code blocks ( f2b4b67 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#code-refactoring","text":"Fetch plugin languages from dict ( de8309e by Timoth\u00e9e Mazzucotelli). Add reusable base formatter ( c265bee by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#040-2022-05-09","text":"Compare with 0.3.1","title":"0.4.0 - 2022-05-09"},{"location":"changelog/#features_3","text":"Add literate Markdown support ( 8d3ed7e by Timoth\u00e9e Mazzucotelli). Add material-block style to show source ( ff10ee1 by Timoth\u00e9e Mazzucotelli). Support up to 8 levels of exec code block nesting ( bfde808 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#031-2022-05-07","text":"Compare with 0.3.0","title":"0.3.1 - 2022-05-07"},{"location":"changelog/#bug-fixes_5","text":"Actually prevent HTML re-rendering ( 4374852 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#030-2022-05-01","text":"Compare with 0.2.0","title":"0.3.0 - 2022-05-01"},{"location":"changelog/#features_4","text":"Support pycon code blocks ( 2c86394 by Timoth\u00e9e Mazzucotelli). Add console source integration option ( 62dfd74 by Timoth\u00e9e Mazzucotelli). Provide a MkDocs plugin for easier setup ( 5fce814 by Timoth\u00e9e Mazzucotelli). Support changing tabs titles ( d150596 by Timoth\u00e9e Mazzucotelli). Allow using print in code blocks ( 7c124fd by Timoth\u00e9e Mazzucotelli). Allow passing extra opts like title to source code blocks ( bb3252a by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#code-refactoring_1","text":"Split Python formatter to allow reuse ( fc56702 by Timoth\u00e9e Mazzucotelli). Setup a more robust Markdown converter ( 395f4c4 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#020-2022-04-18","text":"Compare with 0.1.0","title":"0.2.0 - 2022-04-18"},{"location":"changelog/#features_5","text":"Add ability to render using tabs ( 91a95ae by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#010-2022-02-19","text":"Compare with first commit","title":"0.1.0 - 2022-02-19"},{"location":"changelog/#features_6","text":"Implement execution of code blocks ( 41c8d81 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd markdown-exec make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run markdown-exec [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd markdown-exec make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run markdown-exec [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"These projects were used to build markdown-exec . Thank you! python | pdm | copier-pdm Runtime dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License importlib-metadata Read metadata from Python packages >=4.4; python_version < \"3.10\" 4.13.0 Apache Software License markdown Python implementation of Markdown. >=3.2 3.3.7 BSD License pymdown-extensions Extension pack for Python Markdown. >=9 9.8 MIT License typing-extensions Backported and Experimental Type Hints for Python 3.7+ >=3.6.4; python_version < \"3.8\" 4.4.0 Python Software Foundation License zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.10.0 MIT License Development dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License aiohttp Async http client/server framework (asyncio) >=3.8.1 3.8.3 Apache 2 aiosignal aiosignal: a list of registered asynchronous callbacks >=1.1.2 1.3.1 Apache 2.0 ansimarkup Produce colored terminal text with an xml-like markup ~=1.4 1.5.0 Revised BSD License astor Read/rewrite/write Python ASTs >=0.8 0.8.1 BSD-3-Clause async-timeout Timeout context manager for asyncio programs <5.0,>=4.0.0a3 4.0.2 Apache 2 asynctest Enhance the standard unittest package with features for testing asyncio libraries ==0.13.0; python_version < \"3.8\" 0.13.0 ? attrs Classes Without Boilerplate >=19.2.0 22.1.0 MIT autoflake Removes unused imports and unused variables >=1.4 1.7.7 MIT bandit Security oriented static analyser for python code. >=1.7.3 1.7.4 Apache-2.0 license black The uncompromising code formatter. >=21.10b0 22.10.0 MIT License cached-property A decorator for caching properties in classes. ~=1.5; python_version < \"3.8\" 1.5.2 ? certifi Python package for providing Mozilla's CA Bundle. >=2017.4.17 2022.9.24 MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <3,>=2 2.1.1 MIT click Composable command line interface toolkit >=8.0.0 8.1.3 BSD-3-Clause colorama Cross-platform colored terminal text. ; platform_system == \"Windows\" 0.4.6 BSD License commonmark Python parser for the CommonMark Markdown spec <0.10.0,>=0.9.0 0.9.1 BSD-3-Clause coverage Code coverage measurement for Python [toml]>=5.2.1 6.5.0 Apache 2.0 cycler Composable style cycles >=0.10 0.11.0 BSD darglint A utility for ensuring Google-style docstrings stay up to date with the source code. >=1.8 1.8.1 MIT diagrams Diagram as Code >=0.21.1 0.23.1 MIT dparse A parser for Python dependency files >=0.6.2 0.6.2 MIT license duty A simple task runner. >=0.7 0.7.0 ISC exceptiongroup Backport of PEP 654 (exception groups) >=1.0.0rc8; python_version < \"3.11\" 1.0.1 MIT License execnet execnet: rapid multi-Python deployment >=1.1 1.9.0 MIT failprint Run a command, print its output only if it fails. ~=0.8 0.8.0 ISC flake8 the modular source code checker: pep8 pyflakes and co >=4; python_version >= '3.8' 5.0.4 MIT flake8-bandit Automated security testing with bandit and flake8. >=2.1 4.1.1 MIT flake8-black flake8 plugin to call black as a code style validator >=0.2 0.3.3 MIT flake8-bugbear A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. >=21.9 22.10.27 MIT flake8-builtins Check for python builtins being used as variables or parameters. >=1.5 2.0.1 GPL version 2 flake8-comprehensions A flake8 plugin to help you write better list/set/dict comprehensions. >=3.7 3.10.1 MIT flake8-docstrings Extension for flake8 which uses pydocstyle to check docstrings >=1.6 1.6.0 MIT License flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing <2.0.0,>=1.3.2 1.3.2 MIT flake8-polyfill Polyfill package for Flake8 plugins >=1.0.2 1.0.2 MIT flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. >=1.5 1.6.0 MIT flake8-string-format string format checker, plugin for flake8 >=0.3 0.3.0 MIT License flake8-tidy-imports A flake8 plugin that helps you write tidier imports. >=4.5 4.8.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names >=0.0 0.0.5 MIT fonttools Tools to manipulate font files >=4.22.0 4.38.0 MIT frozenlist A list-like structure which implements collections.abc.MutableSequence >=1.1.1 1.3.3 Apache 2 ghp-import Copy your docs directly to the gh-pages branch. >=1.0 2.1.0 Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. >=0.4 0.6.0 ISC gitdb Git Object Database <5,>=4.0.1 4.0.9 BSD License gitpython GitPython is a python library used to interact with Git repositories >=1.0.1 3.1.29 BSD graphviz Simple Python interface for Graphviz <0.20.0,>=0.13.2 0.19.2 MIT griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. >=0.11.1 0.23.0 ISC idna Internationalized Domain Names in Applications (IDNA) <4,>=2.5 3.4 BSD License importlib-metadata Read metadata from Python packages <5; python_version < '3.8' 4.13.0 Apache Software License iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT License isort A Python utility / library to sort Python imports. >=5.10 5.10.1 MIT jinja2 A very fast and expressive template engine. <4.0,>=2.10 3.1.2 BSD-3-Clause kiwisolver A fast implementation of the Cassowary constraint solver >=1.0.1 1.4.4 BSD License markdown Python implementation of Markdown. <4.0.0,>=3.3.3 3.3.7 BSD License markdown-callouts Markdown extension: a classier syntax for admonitions >=0.2 0.3.0 MIT markupsafe Safely add untrusted strings to HTML/XML markup. >=2.0 2.1.1 BSD-3-Clause matplotlib Python plotting package >=3.5.2 3.5.3 PSF mccabe McCabe checker, plugin for flake8 <0.8.0,>=0.7.0 0.7.0 Expat license mergedeep A deep merge function for \ud83d\udc0d. >=1.3.4 1.3.4 MIT License mkdocs Project documentation with Markdown. >=1.3 1.4.2 BSD License mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. >=0.2 0.2.6 ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build >=0.3 0.4.0 MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML >=0.4 0.5.0 MIT mkdocs-material Documentation that simply works >=7.3 8.5.10 MIT License mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. >=1.1 1.1 MIT License mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page >=0.3 0.3.4 MIT mkdocstrings Automatic documentation from sources, for MkDocs. [python]>=0.18 0.19.0 ISC License (ISCL) mkdocstrings-python A Python handler for mkdocstrings. >=0.5.2 0.7.1 ISC msgpack MessagePack serializer >=1.0.3 1.0.4 Apache 2.0 multidict multidict implementation <7.0,>=4.5 6.0.2 Apache 2 mypy Optional static typing for Python >=0.910 0.990 MIT License mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. >=0.4.3 0.4.3 MIT License numpy NumPy is the fundamental package for array computing with Python. >=1.23; python_version >= '3.8' 1.23.4 BSD packaging Core utilities for Python packages >=20.0 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. >=0.9.0 0.10.2 MPL 2.0 pbr Python Build Reasonableness !=2.1.0,>=2.0.0 5.11.0 Apache Software License pep8-naming Check PEP-8 naming conventions, plugin for flake8 >=0.12 0.13.2 Expat license pillow Python Imaging Library (Fork) >=6.2.0 9.3.0 HPND platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". >=2 2.5.4 MIT License pluggy plugin and hook calling mechanisms for python <2.0,>=0.12 1.0.0 MIT ptyprocess Run a subprocess in a pseudo terminal ~=0.6; sys_platform != \"win32\" 0.7.0 ISC License (ISCL) pycodestyle Python style guide checker <2.10.0,>=2.9.0 2.9.1 Expat license pydeps Display module dependencies >=1.10.12 1.10.24 BSD pydocstyle Python docstring style checker >=2.1 6.1.1 MIT pyflakes passive checker of Python programs >=1.1.0 2.5.0 MIT pygments Pygments is a syntax highlighting package written in Python. >=2.12 2.13.0 BSD License pymdown-extensions Extension pack for Python Markdown. >=9.4 9.8 MIT License pyparsing pyparsing module - Classes and methods to define and execute parsing grammars >=2.2.1 3.0.9 MIT License pytermgui Python TUI framework with mouse support, modular widget system, customizable and rapid terminal markup language and more! >=6.3; python_version >= '3.8' 7.2.0 MIT pytest pytest: simple powerful testing with Python >=6.2 7.2.0 MIT pytest-cov Pytest plugin for measuring coverage. >=3.0 4.0.0 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. >=3.10 3.12.0 MIT pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes >=2.4 3.0.2 MIT python-dateutil Extensions to the standard Python datetime module >=2.7 2.8.2 Dual License pyyaml YAML parser and emitter for Python >=5.1 6.0 MIT pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. >=0.1 0.1 MIT License requests Python HTTP for Humans. >=2.26 2.28.1 Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal >=12.3.0 12.6.0 MIT ruamel.yaml ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order >=0.17.21 0.17.21 MIT license ruamel.yaml.clib C version of reader, parser and emitter for ruamel.yaml derived from libyaml >=0.2.6; platform_python_implementation == \"CPython\" and python_version < \"3.11\" 0.2.7 MIT safety Checks installed dependencies for known vulnerabilities and licenses. >=2 2.3.1 MIT license semver Python helper for Semantic Versioning (http://semver.org/) ~=2.13 2.13.0 BSD setuptools Easily download, build, install, upgrade, and uninstall Python packages >=19.3 65.5.1 MIT License six Python 2 and 3 compatibility utilities >=1.5 1.16.0 MIT smmap A pure Python implementation of a sliding window memory map manager <6,>=3.0.1 5.0.0 BSD snowballstemmer This package provides 29 stemmers for 28 languages generated from Snowball algorithms. 2.2.0 BSD-3-Clause stdlib-list A list of Python Standard Libraries (2.6-7, 3.2-9). 0.8.0 MIT stevedore Manage dynamic plugins for Python applications >=1.20.0 3.5.2 Apache Software License textual Modern Text User Interface framework [dev] 0.4.0 MIT toml Python Library for Tom's Obvious, Minimal Language >=0.10 0.10.2 MIT tomli A lil' TOML parser >=2.0.1; python_version < \"3.11\" 2.0.1 MIT License typed-ast a fork of Python 2 and 3 ast modules with type comment support >=1.4.2; python_version < \"3.8\" and implementation_name == \"cpython\" 1.5.4 ? types-markdown Typing stubs for Markdown >=3.3 3.4.2.1 Apache-2.0 license types-toml Typing stubs for toml >=0.10 0.10.8.1 Apache-2.0 license typing-extensions Backported and Experimental Type Hints for Python 3.7+ >=3.10.0.0; python_version < \"3.10\" 4.4.0 Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <1.27,>=1.21.1 1.26.12 MIT watchdog Filesystem events monitoring >=2.0 2.1.9 Apache License 2.0 wps-light The strictest and most opinionated python linter ever (lighter fork). >=0.15 0.16.1 MIT yarl Yet another URL library <2.0,>=1.0 1.8.1 Apache 2 zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.10.0 MIT License More credits from the author","title":"Credits"},{"location":"gallery/","text":"Gallery \u00a4 Welcome to our gallery of examples! Diagrams (cloud/system architecture) \u00a4 Diagrams offers a nice way of building diagrams. It also bundles a number of images used to illustrate objects and concepts so you can build good-looking diagrams. By default, Diagrams tries to write the result on disk, so we prevent that by patching its render method, and by ignoring the FileNotFoundError that ensues. Then we use its internal dot object and its pipe method to store the diagram in a variable, as base64 encoded PNG data. Finally we output an HTML image with the base64 data. Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result, files which are not automatically added to the final site. Result Source Diagrams from base64 import b64encode from contextlib import suppress from diagrams import Diagram from diagrams.k8s.clusterconfig import HPA from diagrams.k8s.compute import Deployment , Pod , ReplicaSet from diagrams.k8s.network import Ingress , Service with suppress ( FileNotFoundError ): with Diagram ( \"Exposed Pod with 3 Replicas\" , show = False ) as diagram : diagram . render = lambda : None net = Ingress ( \"domain.com\" ) >> Service ( \"svc\" ) net >> [ Pod ( \"pod1\" ), Pod ( \"pod2\" ), Pod ( \"pod3\" )] << ReplicaSet ( \"rs\" ) << Deployment ( \"dp\" ) << HPA ( \"hpa\" ) png = b64encode ( diagram . dot . pipe ( format = \"png\" )) . decode () print ( f '<img src=\"data:image/png;base64, { png } \"/>' ) Python modules inter-dependencies \u00a4 This example uses pydeps to build a graph of interdependencies of your project's modules. Data is built and stored in a pydeps data structure, then translated to dot source, then rendered to SVG with Graphviz . In this example we also add links to the code reference in related nodes. Try clicking on the markdown_exec nodes! Note pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted, but you could make a function of it, put it in an importable script/module, and reuse it cleanly in your executed code blocks. Result Source G markdown markdown markdown_exec markdown_exec markdown->markdown_exec markdown_exec.formatters.base markdown_exec. formatters. base markdown->markdown_exec_formatters_base markdown_exec.formatters.console markdown_exec. formatters. console markdown->markdown_exec_formatters_console markdown_exec.formatters.pycon markdown_exec. formatters. pycon markdown->markdown_exec_formatters_pycon markdown_exec_formatters_tree markdown_exec. formatters. tree markdown->markdown_exec_formatters_tree markdown_exec.rendering markdown_exec. rendering markdown->markdown_exec_rendering mkdocs_config_config_options mkdocs. config. config_options markdown->mkdocs_config_config_options markdown_core markdown.core markdown_core->markdown markdown_core->markdown_exec_formatters_base markdown_core->markdown_exec_formatters_console markdown_core->markdown_exec_formatters_pycon markdown_treeprocessors markdown. treeprocessors markdown_treeprocessors->markdown_core markdown_treeprocessors->markdown_exec_rendering markdown_exec.formatters markdown_exec. formatters markdown_exec_formatters->markdown_exec markdown_exec.mkdocs_plugin markdown_exec. mkdocs_plugin markdown_exec_formatters->markdown_exec_mkdocs_plugin markdown_exec.formatters.bash markdown_exec. formatters. bash markdown_exec_formatters_base->markdown_exec_formatters_bash markdown_exec.formatters.markdown markdown_exec. formatters. markdown markdown_exec_formatters_base->markdown_exec_formatters_markdown markdown_exec.formatters.python markdown_exec. formatters. python markdown_exec_formatters_base->markdown_exec_formatters_python markdown_exec.formatters.sh markdown_exec. formatters. sh markdown_exec_formatters_base->markdown_exec_formatters_sh markdown_exec_formatters_bash->markdown_exec markdown_exec_formatters_console->markdown_exec markdown_exec_formatters_markdown->markdown_exec markdown_exec_formatters_pycon->markdown_exec markdown_exec_formatters_python->markdown_exec markdown_exec_formatters_python->markdown_exec_formatters_pycon markdown_exec_formatters_sh->markdown_exec markdown_exec_formatters_sh->markdown_exec_formatters_console markdown_exec_formatters_tree->markdown_exec markdown_exec_logger markdown_exec. logger markdown_exec_logger->markdown_exec_formatters_base markdown_exec_logger->markdown_exec_formatters_console markdown_exec_logger->markdown_exec_formatters_pycon markdown_exec_logger->markdown_exec_mkdocs_plugin markdown_exec_rendering->markdown_exec_formatters_base markdown_exec_rendering->markdown_exec_formatters_bash markdown_exec_rendering->markdown_exec_formatters_console markdown_exec_rendering->markdown_exec_formatters_pycon markdown_exec_rendering->markdown_exec_formatters_python markdown_exec_rendering->markdown_exec_formatters_sh markdown_exec_rendering->markdown_exec_formatters_tree markupsafe markupsafe markupsafe->markdown_exec_formatters_base markupsafe->markdown_exec_rendering mkdocs mkdocs mkdocs->markdown_exec_mkdocs_plugin mkdocs_config mkdocs.config mkdocs_config->markdown_exec_mkdocs_plugin mkdocs_plugins mkdocs.plugins mkdocs_config->mkdocs_plugins mkdocs_config_config_options->markdown_exec_mkdocs_plugin mkdocs_plugins->markdown_exec_mkdocs_plugin mkdocs_plugins->mkdocs_config_config_options pydeps module dependencies graph from pydeps import cli , colors , dot , py2depgraph from pydeps.pydeps import depgraph_to_dotsrc from pydeps.target import Target cli . verbose = cli . _not_verbose options = cli . parse_args ([ \"src/markdown_exec\" , \"--noshow\" ]) colors . START_COLOR = options [ \"start_color\" ] target = Target ( options [ \"fname\" ]) with target . chdir_work (): dep_graph = py2depgraph . py2dep ( target , ** options ) dot_src = depgraph_to_dotsrc ( target , dep_graph , ** options ) svg = dot . call_graphviz_dot ( dot_src , \"svg\" ) . decode () svg = \"\" . join ( svg . splitlines ()[ 6 :]) svg = svg . replace ( 'fill=\"white\"' , 'fill=\"transparent\"' ) reference = \"../reference\" modules = ( \"markdown_exec\" , \"markdown_exec.formatters\" , \"markdown_exec.formatters.base\" , \"markdown_exec.formatters.bash\" , \"markdown_exec.formatters.console\" , \"markdown_exec.formatters.markdown\" , \"markdown_exec.formatters.pycon\" , \"markdown_exec.formatters.python\" , \"markdown_exec.formatters.sh\" , \"markdown_exec.mkdocs_plugin\" , \"markdown_exec.rendering\" , ) for module in modules : svg_title = module . replace ( \".\" , \"_\" ) title_tag = f \"<title> { svg_title } </title>\" href = f \" { reference } / { module . replace ( '.' , '/' ) } /\" svg = svg . replace ( title_tag , f '<a href=\" { href } \"><title> { module } </title>' ) svg = svg . replace ( \"</text></g>\" , \"</text></a></g>\" ) print ( svg ) Code snippets \u00a4 Rich allows to export syntax-highlighted code as SVG. Here we hardcode the code snippet we want to render, but we could instead include it from somewhere else using the pymdownx.snippets extension or by reading it dynamically from Python. We also prevent Rich from actually writing to the terminal. Result Source @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .terminal-407946960-matrix { font-family: Fira Code, monospace; font-size: 20px; line-height: 24.4px; font-variant-east-asian: full-width; } .terminal-407946960-title { font-size: 18px; font-weight: bold; font-family: arial; } .terminal-407946960-r1 { fill: #c5c8c6 } .terminal-407946960-r2 { fill: #eeffff } .terminal-407946960-r3 { fill: #89ddff;font-style: italic; } .terminal-407946960-r4 { fill: #ffcb6b } .terminal-407946960-r5 { fill: #bb80b3 } .terminal-407946960-r6 { fill: #89ddff } .terminal-407946960-r7 { fill: #82aaff } .terminal-407946960-r8 { fill: #c3e88d } async context manager from contextlib import asynccontextmanager import httpx class BookClient ( httpx . AsyncClient ) : async def get_book ( self , book_id : int ) - > str : response = await self . get ( f \" /books/ { book_id } \" ) return response . text @asynccontextmanager async def book_client ( * args , * * kwargs ) : async with BookClient ( * args , * * kwargs ) as client : yield client Rich SVG code snippet import os from rich.console import Console from rich.padding import Padding from rich.syntax import Syntax code = \"\"\" from contextlib import asynccontextmanager import httpx class BookClient(httpx.AsyncClient): async def get_book(self, book_id: int) -> str: response = await self.get(f\"/books/ {book_id} \") return response.text @asynccontextmanager async def book_client(*args, **kwargs): async with BookClient(*args, **kwargs) as client: yield client \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 65 , file = devnull , markup = False ) renderable = Syntax ( code , \"python\" , theme = \"material\" ) renderable = Padding ( renderable , ( 0 ,), expand = False ) console . print ( renderable , markup = False ) svg = console . export_svg ( title = \"async context manager\" ) print ( svg ) Terminal output with colors \u00a4 We use Rich again to render the output of a command in a terminal, with colors. This example is taken directly from the documentation of the Griffe project. Result Source $ griffe check griffe -ssrc -b0.24.0 -a0.23.0 src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_exported ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_exported ): Parameter default was changed : True -> None src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_known_modules ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_known_modules ): Parameter default was changed : True -> None src/griffe/loader.py :156: GriffeLoader.resolve_aliases( max_iterations ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :308: GriffeLoader.resolve_module_aliases( only_exported ): Parameter was removed src/griffe/loader.py :308: GriffeLoader.resolve_module_aliases( only_known_modules ): Parameter was removed src/griffe/git.py :39: tmp_worktree( commit ): Parameter was removed src/griffe/git.py :39: tmp_worktree( repo ): Positional parameter was moved : position: from 2 to 1 (-1) src/griffe/git.py :75: load_git( commit ): Parameter was removed src/griffe/git.py :75: load_git( repo ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( submodules ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( try_relative_path ): Parameter was removed src/griffe/git.py :75: load_git( extensions ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( search_paths ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( docstring_parser ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( docstring_options ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( lines_collection ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( modules_collection ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( allow_inspection ): Parameter kind was changed : positional or keyword -> keyword-only Rich terminal output import os from rich.console import Console report = \"\"\"$ griffe check griffe -ssrc -b0.24.0 -a0.23.0 [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter default was changed[/]: True -> None [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter default was changed[/]: True -> None [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]max_iterations[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]commit[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]repo[/]): [#afaf72]Positional parameter was moved[/]: position: from 2 to 1 (-1) [bold]src/griffe/git.py[/]:75: load_git([#7faeff]commit[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:75: load_git([#7faeff]repo[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]submodules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]try_relative_path[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:75: load_git([#7faeff]extensions[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]search_paths[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_parser[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_options[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]lines_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]modules_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]allow_inspection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 150 , file = devnull ) console . print ( report , markup = True , highlight = False ) print ( console . export_html ( inline_styles = True , code_format = \"<pre><code> {code} </code></pre>\" )) TUI screenshots \u00a4 Textual allows to build Terminal User Interfaces (TUIs). In this example we generate the SVG image of a terminal interface. Result Source @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .terminal-3120443225-matrix { font-family: Fira Code, monospace; font-size: 20px; line-height: 24.4px; font-variant-east-asian: full-width; } .terminal-3120443225-title { font-size: 18px; font-weight: bold; font-family: arial; } .terminal-3120443225-r1 { fill: #ffffff } .terminal-3120443225-r2 { fill: #c5c8c6 } .terminal-3120443225-r3 { fill: #ffffff;font-weight: bold } TextApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 \u2503 \u2503 \u2503 \u2503 Hello \u2503 \u2503 \u2503 \u2503 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 \u2503 \u2503 \u2503 \u2503 World! \u2503 \u2503 \u2503 \u2503 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b from textual.app import App , ComposeResult from textual.pilot import Pilot from textual.widgets import Static class TextApp ( App ): CSS = \"\"\" Screen { background: darkblue; color: white; layout: vertical; } Static { height: auto; padding: 2; border: heavy white; background: #ffffff 30%; content-align: center middle; } \"\"\" def compose ( self ) -> ComposeResult : yield Static ( \"Hello\" ) yield Static ( \"[b]World![/b]\" ) async def auto_pilot ( pilot : Pilot ): pilot . app . exit ( pilot . app . export_screenshot ()) print ( TextApp () . run ( headless = True , size = ( 80 , 24 ), auto_pilot = auto_pilot )) Charts and Plots \u00a4 With Matplotlib : Result Source 2022-11-13T15:53:30.405387 image/svg+xml Matplotlib v3.5.3, https://matplotlib.org/ *{stroke-linejoin: round; stroke-linecap: butt} matplotlib graph # https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_demo2.html from io import StringIO import matplotlib.cbook as cbook import matplotlib.pyplot as plt import numpy as np # Load a numpy record array from yahoo csv data with fields date, open, close, # volume, adj_close from the mpl-data/example directory. The record array # stores the date as an np.datetime64 with a day unit ('D') in the date column. price_data = cbook . get_sample_data ( \"goog.npz\" , np_load = True )[ \"price_data\" ] . view ( np . recarray ) price_data = price_data [ - 250 :] # get the most recent 250 trading days delta1 = np . diff ( price_data . adj_close ) / price_data . adj_close [: - 1 ] # Marker size in units of points^2 volume = ( 15 * price_data . volume [: - 2 ] / price_data . volume [ 0 ]) ** 2 close = 0.003 * price_data . close [: - 2 ] / 0.003 * price_data . open [: - 2 ] fig , ax = plt . subplots () ax . scatter ( delta1 [: - 1 ], delta1 [ 1 :], c = close , s = volume , alpha = 0.5 ) ax . set_xlabel ( r \"$\\Delta_i$\" , fontsize = 15 ) ax . set_ylabel ( r \"$\\Delta_{i+1}$\" , fontsize = 15 ) ax . set_title ( \"Volume and percent change\" ) ax . grid ( True ) fig . tight_layout () buffer = StringIO () plt . savefig ( buffer , format = \"svg\" ) print ( buffer . getvalue ()) Python module output \u00a4 This example uses Python's runpy module to run another Python module. This other module's output is captured by temporarily patching sys.stdout with a text buffer. Result Source Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server runpy and script/module output import sys import warnings from contextlib import suppress from io import StringIO from runpy import run_module old_argv = list ( sys . argv ) sys . argv = [ \"mkdocs\" ] old_stdout = sys . stdout sys . stdout = StringIO () warnings . filterwarnings ( \"ignore\" , category = RuntimeWarning ) with suppress ( SystemExit ): run_module ( \"mkdocs\" , run_name = \"__main__\" ) output = sys . stdout . getvalue () sys . stdout = old_stdout sys . argv = old_argv print ( f \"``` \\n { output } \\n ```\" ) Python CLI documentation \u00a4 Argparse help message (code block) \u00a4 Instead of blindly running a module with runpy to get its help message, if you know the project is using argparse to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser. Result Source usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...] A simple task runner. positional arguments: remainder Global options: -d DUTIES_FILE, --duties-file DUTIES_FILE Python file where the duties are defined. -l, --list List the available duties. -h [DUTY [DUTY ...]], --help [DUTY [DUTY ...]] Show this help message and exit. Pass duties names to print their help. -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none} Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y, --pty Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y, --no-pty Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p, --progress Print progress while running a command. -P, --no-progress Don't print progress while running a command. -q, --quiet Don't print the command output, even if it failed. -Q, --no-quiet Print the command output when it fails. -s, --silent Don't print anything. -S, --no-silent Print output as usual. -z, --zero, --nofail Don't fail. Always return a success (0) exit code. -Z, --no-zero, --strict Return the original exit code. argparse parser help message from duty.cli import get_parser parser = get_parser () print ( f \"``` \\n { parser . format_help () } \\n ```\" ) Argparse parser documentation \u00a4 In this example, we inspect the argparse parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course. Result Source duty \u00a4 A simple task runner. Options: -d , --duties-file : Python file where the duties are defined.(default: duties.py) -l , --list : List the available duties. -h , --help DUTY : Show this help message and exit. Pass duties names to print their help. -c , --capture : Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f , --fmt , --format : Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y , --pty : Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y , --no-pty : Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p , --progress : Print progress while running a command. -P , --no-progress : Don't print progress while running a command. -q , --quiet : Don't print the command output, even if it failed. -Q , --no-quiet : Print the command output when it fails. -s , --silent : Don't print anything. -S , --no-silent : Print output as usual. -z , --zero , --nofail : Don't fail. Always return a success (0) exit code. -Z , --no-zero , --strict : Return the original exit code. CLI help using argparse parser import argparse from duty.cli import get_parser parser = get_parser () lines = [] lines . append ( f \"## duty\" ) if parser . description : lines . append ( parser . description ) lines . append ( \" \\n Options: \\n \" ) for action in parser . _actions : opts = [ f \"` { opt } `\" for opt in action . option_strings ] if not opts : continue line = \"- \" + \",\" . join ( opts ) if action . metavar : line += f \" ` { action . metavar } `\" line += f \": { action . help } \" if action . default and action . default != argparse . SUPPRESS : line += f \"(default: { action . default } )\" lines . append ( line ) print ( \" \\n \" . join ( lines ))","title":"Gallery"},{"location":"gallery/#gallery","text":"Welcome to our gallery of examples!","title":"Gallery"},{"location":"gallery/#diagrams-cloudsystem-architecture","text":"Diagrams offers a nice way of building diagrams. It also bundles a number of images used to illustrate objects and concepts so you can build good-looking diagrams. By default, Diagrams tries to write the result on disk, so we prevent that by patching its render method, and by ignoring the FileNotFoundError that ensues. Then we use its internal dot object and its pipe method to store the diagram in a variable, as base64 encoded PNG data. Finally we output an HTML image with the base64 data. Using SVG is not possible here since Diagrams embeds actual, smaller PNG files in the result, files which are not automatically added to the final site. Result Source Diagrams from base64 import b64encode from contextlib import suppress from diagrams import Diagram from diagrams.k8s.clusterconfig import HPA from diagrams.k8s.compute import Deployment , Pod , ReplicaSet from diagrams.k8s.network import Ingress , Service with suppress ( FileNotFoundError ): with Diagram ( \"Exposed Pod with 3 Replicas\" , show = False ) as diagram : diagram . render = lambda : None net = Ingress ( \"domain.com\" ) >> Service ( \"svc\" ) net >> [ Pod ( \"pod1\" ), Pod ( \"pod2\" ), Pod ( \"pod3\" )] << ReplicaSet ( \"rs\" ) << Deployment ( \"dp\" ) << HPA ( \"hpa\" ) png = b64encode ( diagram . dot . pipe ( format = \"png\" )) . decode () print ( f '<img src=\"data:image/png;base64, { png } \"/>' )","title":"Diagrams (cloud/system architecture)"},{"location":"gallery/#python-modules-inter-dependencies","text":"This example uses pydeps to build a graph of interdependencies of your project's modules. Data is built and stored in a pydeps data structure, then translated to dot source, then rendered to SVG with Graphviz . In this example we also add links to the code reference in related nodes. Try clicking on the markdown_exec nodes! Note pydeps wasn't designed to be used in such a programatic way, so the code is a bit convoluted, but you could make a function of it, put it in an importable script/module, and reuse it cleanly in your executed code blocks. Result Source G markdown markdown markdown_exec markdown_exec markdown->markdown_exec markdown_exec.formatters.base markdown_exec. formatters. base markdown->markdown_exec_formatters_base markdown_exec.formatters.console markdown_exec. formatters. console markdown->markdown_exec_formatters_console markdown_exec.formatters.pycon markdown_exec. formatters. pycon markdown->markdown_exec_formatters_pycon markdown_exec_formatters_tree markdown_exec. formatters. tree markdown->markdown_exec_formatters_tree markdown_exec.rendering markdown_exec. rendering markdown->markdown_exec_rendering mkdocs_config_config_options mkdocs. config. config_options markdown->mkdocs_config_config_options markdown_core markdown.core markdown_core->markdown markdown_core->markdown_exec_formatters_base markdown_core->markdown_exec_formatters_console markdown_core->markdown_exec_formatters_pycon markdown_treeprocessors markdown. treeprocessors markdown_treeprocessors->markdown_core markdown_treeprocessors->markdown_exec_rendering markdown_exec.formatters markdown_exec. formatters markdown_exec_formatters->markdown_exec markdown_exec.mkdocs_plugin markdown_exec. mkdocs_plugin markdown_exec_formatters->markdown_exec_mkdocs_plugin markdown_exec.formatters.bash markdown_exec. formatters. bash markdown_exec_formatters_base->markdown_exec_formatters_bash markdown_exec.formatters.markdown markdown_exec. formatters. markdown markdown_exec_formatters_base->markdown_exec_formatters_markdown markdown_exec.formatters.python markdown_exec. formatters. python markdown_exec_formatters_base->markdown_exec_formatters_python markdown_exec.formatters.sh markdown_exec. formatters. sh markdown_exec_formatters_base->markdown_exec_formatters_sh markdown_exec_formatters_bash->markdown_exec markdown_exec_formatters_console->markdown_exec markdown_exec_formatters_markdown->markdown_exec markdown_exec_formatters_pycon->markdown_exec markdown_exec_formatters_python->markdown_exec markdown_exec_formatters_python->markdown_exec_formatters_pycon markdown_exec_formatters_sh->markdown_exec markdown_exec_formatters_sh->markdown_exec_formatters_console markdown_exec_formatters_tree->markdown_exec markdown_exec_logger markdown_exec. logger markdown_exec_logger->markdown_exec_formatters_base markdown_exec_logger->markdown_exec_formatters_console markdown_exec_logger->markdown_exec_formatters_pycon markdown_exec_logger->markdown_exec_mkdocs_plugin markdown_exec_rendering->markdown_exec_formatters_base markdown_exec_rendering->markdown_exec_formatters_bash markdown_exec_rendering->markdown_exec_formatters_console markdown_exec_rendering->markdown_exec_formatters_pycon markdown_exec_rendering->markdown_exec_formatters_python markdown_exec_rendering->markdown_exec_formatters_sh markdown_exec_rendering->markdown_exec_formatters_tree markupsafe markupsafe markupsafe->markdown_exec_formatters_base markupsafe->markdown_exec_rendering mkdocs mkdocs mkdocs->markdown_exec_mkdocs_plugin mkdocs_config mkdocs.config mkdocs_config->markdown_exec_mkdocs_plugin mkdocs_plugins mkdocs.plugins mkdocs_config->mkdocs_plugins mkdocs_config_config_options->markdown_exec_mkdocs_plugin mkdocs_plugins->markdown_exec_mkdocs_plugin mkdocs_plugins->mkdocs_config_config_options pydeps module dependencies graph from pydeps import cli , colors , dot , py2depgraph from pydeps.pydeps import depgraph_to_dotsrc from pydeps.target import Target cli . verbose = cli . _not_verbose options = cli . parse_args ([ \"src/markdown_exec\" , \"--noshow\" ]) colors . START_COLOR = options [ \"start_color\" ] target = Target ( options [ \"fname\" ]) with target . chdir_work (): dep_graph = py2depgraph . py2dep ( target , ** options ) dot_src = depgraph_to_dotsrc ( target , dep_graph , ** options ) svg = dot . call_graphviz_dot ( dot_src , \"svg\" ) . decode () svg = \"\" . join ( svg . splitlines ()[ 6 :]) svg = svg . replace ( 'fill=\"white\"' , 'fill=\"transparent\"' ) reference = \"../reference\" modules = ( \"markdown_exec\" , \"markdown_exec.formatters\" , \"markdown_exec.formatters.base\" , \"markdown_exec.formatters.bash\" , \"markdown_exec.formatters.console\" , \"markdown_exec.formatters.markdown\" , \"markdown_exec.formatters.pycon\" , \"markdown_exec.formatters.python\" , \"markdown_exec.formatters.sh\" , \"markdown_exec.mkdocs_plugin\" , \"markdown_exec.rendering\" , ) for module in modules : svg_title = module . replace ( \".\" , \"_\" ) title_tag = f \"<title> { svg_title } </title>\" href = f \" { reference } / { module . replace ( '.' , '/' ) } /\" svg = svg . replace ( title_tag , f '<a href=\" { href } \"><title> { module } </title>' ) svg = svg . replace ( \"</text></g>\" , \"</text></a></g>\" ) print ( svg )","title":"Python modules inter-dependencies"},{"location":"gallery/#code-snippets","text":"Rich allows to export syntax-highlighted code as SVG. Here we hardcode the code snippet we want to render, but we could instead include it from somewhere else using the pymdownx.snippets extension or by reading it dynamically from Python. We also prevent Rich from actually writing to the terminal. Result Source @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .terminal-407946960-matrix { font-family: Fira Code, monospace; font-size: 20px; line-height: 24.4px; font-variant-east-asian: full-width; } .terminal-407946960-title { font-size: 18px; font-weight: bold; font-family: arial; } .terminal-407946960-r1 { fill: #c5c8c6 } .terminal-407946960-r2 { fill: #eeffff } .terminal-407946960-r3 { fill: #89ddff;font-style: italic; } .terminal-407946960-r4 { fill: #ffcb6b } .terminal-407946960-r5 { fill: #bb80b3 } .terminal-407946960-r6 { fill: #89ddff } .terminal-407946960-r7 { fill: #82aaff } .terminal-407946960-r8 { fill: #c3e88d } async context manager from contextlib import asynccontextmanager import httpx class BookClient ( httpx . AsyncClient ) : async def get_book ( self , book_id : int ) - > str : response = await self . get ( f \" /books/ { book_id } \" ) return response . text @asynccontextmanager async def book_client ( * args , * * kwargs ) : async with BookClient ( * args , * * kwargs ) as client : yield client Rich SVG code snippet import os from rich.console import Console from rich.padding import Padding from rich.syntax import Syntax code = \"\"\" from contextlib import asynccontextmanager import httpx class BookClient(httpx.AsyncClient): async def get_book(self, book_id: int) -> str: response = await self.get(f\"/books/ {book_id} \") return response.text @asynccontextmanager async def book_client(*args, **kwargs): async with BookClient(*args, **kwargs) as client: yield client \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 65 , file = devnull , markup = False ) renderable = Syntax ( code , \"python\" , theme = \"material\" ) renderable = Padding ( renderable , ( 0 ,), expand = False ) console . print ( renderable , markup = False ) svg = console . export_svg ( title = \"async context manager\" ) print ( svg )","title":"Code snippets"},{"location":"gallery/#terminal-output-with-colors","text":"We use Rich again to render the output of a command in a terminal, with colors. This example is taken directly from the documentation of the Griffe project. Result Source $ griffe check griffe -ssrc -b0.24.0 -a0.23.0 src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_exported ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_exported ): Parameter default was changed : True -> None src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_known_modules ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :156: GriffeLoader.resolve_aliases( only_known_modules ): Parameter default was changed : True -> None src/griffe/loader.py :156: GriffeLoader.resolve_aliases( max_iterations ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/loader.py :308: GriffeLoader.resolve_module_aliases( only_exported ): Parameter was removed src/griffe/loader.py :308: GriffeLoader.resolve_module_aliases( only_known_modules ): Parameter was removed src/griffe/git.py :39: tmp_worktree( commit ): Parameter was removed src/griffe/git.py :39: tmp_worktree( repo ): Positional parameter was moved : position: from 2 to 1 (-1) src/griffe/git.py :75: load_git( commit ): Parameter was removed src/griffe/git.py :75: load_git( repo ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( submodules ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( try_relative_path ): Parameter was removed src/griffe/git.py :75: load_git( extensions ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( search_paths ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( docstring_parser ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( docstring_options ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( lines_collection ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( modules_collection ): Parameter kind was changed : positional or keyword -> keyword-only src/griffe/git.py :75: load_git( allow_inspection ): Parameter kind was changed : positional or keyword -> keyword-only Rich terminal output import os from rich.console import Console report = \"\"\"$ griffe check griffe -ssrc -b0.24.0 -a0.23.0 [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter default was changed[/]: True -> None [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter default was changed[/]: True -> None [bold]src/griffe/loader.py[/]:156: GriffeLoader.resolve_aliases([#7faeff]max_iterations[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_exported[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/loader.py[/]:308: GriffeLoader.resolve_module_aliases([#7faeff]only_known_modules[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]commit[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:39: tmp_worktree([#7faeff]repo[/]): [#afaf72]Positional parameter was moved[/]: position: from 2 to 1 (-1) [bold]src/griffe/git.py[/]:75: load_git([#7faeff]commit[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:75: load_git([#7faeff]repo[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]submodules[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]try_relative_path[/]): [#afaf72]Parameter was removed[/] [bold]src/griffe/git.py[/]:75: load_git([#7faeff]extensions[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]search_paths[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_parser[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]docstring_options[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]lines_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]modules_collection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only [bold]src/griffe/git.py[/]:75: load_git([#7faeff]allow_inspection[/]): [#afaf72]Parameter kind was changed[/]: positional or keyword -> keyword-only \"\"\" with open ( os . devnull , \"w\" ) as devnull : console = Console ( record = True , width = 150 , file = devnull ) console . print ( report , markup = True , highlight = False ) print ( console . export_html ( inline_styles = True , code_format = \"<pre><code> {code} </code></pre>\" ))","title":"Terminal output with colors"},{"location":"gallery/#tui-screenshots","text":"Textual allows to build Terminal User Interfaces (TUIs). In this example we generate the SVG image of a terminal interface. Result Source @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Regular\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\"); font-style: normal; font-weight: 400; } @font-face { font-family: \"Fira Code\"; src: local(\"FiraCode-Bold\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"), url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\"); font-style: bold; font-weight: 700; } .terminal-3120443225-matrix { font-family: Fira Code, monospace; font-size: 20px; line-height: 24.4px; font-variant-east-asian: full-width; } .terminal-3120443225-title { font-size: 18px; font-weight: bold; font-family: arial; } .terminal-3120443225-r1 { fill: #ffffff } .terminal-3120443225-r2 { fill: #c5c8c6 } .terminal-3120443225-r3 { fill: #ffffff;font-weight: bold } TextApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 \u2503 \u2503 \u2503 \u2503 Hello \u2503 \u2503 \u2503 \u2503 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 \u2503 \u2503 \u2503 \u2503 World! \u2503 \u2503 \u2503 \u2503 \u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b from textual.app import App , ComposeResult from textual.pilot import Pilot from textual.widgets import Static class TextApp ( App ): CSS = \"\"\" Screen { background: darkblue; color: white; layout: vertical; } Static { height: auto; padding: 2; border: heavy white; background: #ffffff 30%; content-align: center middle; } \"\"\" def compose ( self ) -> ComposeResult : yield Static ( \"Hello\" ) yield Static ( \"[b]World![/b]\" ) async def auto_pilot ( pilot : Pilot ): pilot . app . exit ( pilot . app . export_screenshot ()) print ( TextApp () . run ( headless = True , size = ( 80 , 24 ), auto_pilot = auto_pilot ))","title":"TUI screenshots"},{"location":"gallery/#charts-and-plots","text":"With Matplotlib : Result Source 2022-11-13T15:53:30.405387 image/svg+xml Matplotlib v3.5.3, https://matplotlib.org/ *{stroke-linejoin: round; stroke-linecap: butt} matplotlib graph # https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_demo2.html from io import StringIO import matplotlib.cbook as cbook import matplotlib.pyplot as plt import numpy as np # Load a numpy record array from yahoo csv data with fields date, open, close, # volume, adj_close from the mpl-data/example directory. The record array # stores the date as an np.datetime64 with a day unit ('D') in the date column. price_data = cbook . get_sample_data ( \"goog.npz\" , np_load = True )[ \"price_data\" ] . view ( np . recarray ) price_data = price_data [ - 250 :] # get the most recent 250 trading days delta1 = np . diff ( price_data . adj_close ) / price_data . adj_close [: - 1 ] # Marker size in units of points^2 volume = ( 15 * price_data . volume [: - 2 ] / price_data . volume [ 0 ]) ** 2 close = 0.003 * price_data . close [: - 2 ] / 0.003 * price_data . open [: - 2 ] fig , ax = plt . subplots () ax . scatter ( delta1 [: - 1 ], delta1 [ 1 :], c = close , s = volume , alpha = 0.5 ) ax . set_xlabel ( r \"$\\Delta_i$\" , fontsize = 15 ) ax . set_ylabel ( r \"$\\Delta_{i+1}$\" , fontsize = 15 ) ax . set_title ( \"Volume and percent change\" ) ax . grid ( True ) fig . tight_layout () buffer = StringIO () plt . savefig ( buffer , format = \"svg\" ) print ( buffer . getvalue ())","title":"Charts and Plots"},{"location":"gallery/#python-module-output","text":"This example uses Python's runpy module to run another Python module. This other module's output is captured by temporarily patching sys.stdout with a text buffer. Result Source Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server runpy and script/module output import sys import warnings from contextlib import suppress from io import StringIO from runpy import run_module old_argv = list ( sys . argv ) sys . argv = [ \"mkdocs\" ] old_stdout = sys . stdout sys . stdout = StringIO () warnings . filterwarnings ( \"ignore\" , category = RuntimeWarning ) with suppress ( SystemExit ): run_module ( \"mkdocs\" , run_name = \"__main__\" ) output = sys . stdout . getvalue () sys . stdout = old_stdout sys . argv = old_argv print ( f \"``` \\n { output } \\n ```\" )","title":"Python module output"},{"location":"gallery/#python-cli-documentation","text":"","title":"Python CLI documentation"},{"location":"gallery/#argparse-help-message-code-block","text":"Instead of blindly running a module with runpy to get its help message, if you know the project is using argparse to build its command line interface, and if it exposes its parser, then you can get the help message directly from the parser. Result Source usage: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...] A simple task runner. positional arguments: remainder Global options: -d DUTIES_FILE, --duties-file DUTIES_FILE Python file where the duties are defined. -l, --list List the available duties. -h [DUTY [DUTY ...]], --help [DUTY [DUTY ...]] Show this help message and exit. Pass duties names to print their help. -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none} Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option. -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap} Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean). Available filters: indent (textwrap.indent). -y, --pty Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -Y, --no-pty Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input. -p, --progress Print progress while running a command. -P, --no-progress Don't print progress while running a command. -q, --quiet Don't print the command output, even if it failed. -Q, --no-quiet Print the command output when it fails. -s, --silent Don't print anything. -S, --no-silent Print output as usual. -z, --zero, --nofail Don't fail. Always return a success (0) exit code. -Z, --no-zero, --strict Return the original exit code. argparse parser help message from duty.cli import get_parser parser = get_parser () print ( f \"``` \\n { parser . format_help () } \\n ```\" )","title":"Argparse help message (code block)"},{"location":"gallery/#argparse-parser-documentation","text":"In this example, we inspect the argparse parser to build better-looking Markdown/HTML contents. We simply use the description and iterate on options, but more complex stuff is possible of course. Result Source","title":"Argparse parser documentation"},{"location":"license/","text":"ISC License Copyright (c) 2022, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"markdown_exec formatters base bash console markdown pycon python sh tree logger mkdocs_plugin rendering","title":"SUMMARY"},{"location":"reference/markdown_exec/","text":"Markdown Exec package. Utilities to execute code blocks in Markdown files. formatter ( source , language , css_class , options , md , classes = None , id_value = '' , attrs = None , ** kwargs ) \u00a4 Execute code and return HTML. Parameters: Name Type Description Default source str The code to execute. required language str The code language, like python or bash. required css_class str The CSS class to add to the HTML element. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] | None The container for attrs: None md Markdown The Markdown instance. required classes list [ str ] | None Additional CSS classes. None id_value str An optional HTML id. '' attrs dict [ str , Any ] | None Additional attributes None **kwargs Any Additional arguments passed to SuperFences default formatters. {} Returns: Type Description str HTML contents. Source code in markdown_exec/__init__.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def formatter ( source : str , language : str , css_class : str , options : dict [ str , Any ], md : Markdown , classes : list [ str ] | None = None , id_value : str = \"\" , attrs : dict [ str , Any ] | None = None , ** kwargs : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: source: The code to execute. language: The code language, like python or bash. css_class: The CSS class to add to the HTML element. options: The container for options. attrs: The container for attrs: md: The Markdown instance. classes: Additional CSS classes. id_value: An optional HTML id. attrs: Additional attributes **kwargs: Additional arguments passed to SuperFences default formatters. Returns: HTML contents. \"\"\" fmt = formatters . get ( language , lambda source , * args , ** kwargs : source ) return fmt ( source , md , ** options ) # type: ignore[operator] validator ( language , inputs , options , attrs , md ) \u00a4 Validate code blocks inputs. Parameters: Name Type Description Default language str The code language, like python or bash. required inputs dict [ str , str ] The code block inputs, to be sorted into options and attrs. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] The container for attrs: required md Markdown The Markdown instance. required Returns: Type Description bool Success or not. Source code in markdown_exec/__init__.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def validator ( language : str , inputs : dict [ str , str ], options : dict [ str , Any ], attrs : dict [ str , Any ], md : Markdown ) -> bool : \"\"\"Validate code blocks inputs. Parameters: language: The code language, like python or bash. inputs: The code block inputs, to be sorted into options and attrs. options: The container for options. attrs: The container for attrs: md: The Markdown instance. Returns: Success or not. \"\"\" exec_value = _to_bool ( inputs . pop ( \"exec\" , \"no\" )) if language != \"tree\" and not exec_value : return False html_value = _to_bool ( inputs . pop ( \"html\" , \"no\" )) source_value = inputs . pop ( \"source\" , \"\" ) result_value = inputs . pop ( \"result\" , \"\" ) tabs_value = inputs . pop ( \"tabs\" , \"Source|Result\" ) tabs = tuple ( _tabs_re . split ( tabs_value , maxsplit = 1 )) options [ \"exec\" ] = exec_value options [ \"html\" ] = html_value options [ \"source\" ] = source_value options [ \"result\" ] = result_value options [ \"tabs\" ] = tabs options [ \"extra\" ] = inputs return True","title":"markdown_exec"},{"location":"reference/markdown_exec/#markdown_exec.formatter","text":"Execute code and return HTML. Parameters: Name Type Description Default source str The code to execute. required language str The code language, like python or bash. required css_class str The CSS class to add to the HTML element. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] | None The container for attrs: None md Markdown The Markdown instance. required classes list [ str ] | None Additional CSS classes. None id_value str An optional HTML id. '' attrs dict [ str , Any ] | None Additional attributes None **kwargs Any Additional arguments passed to SuperFences default formatters. {} Returns: Type Description str HTML contents. Source code in markdown_exec/__init__.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def formatter ( source : str , language : str , css_class : str , options : dict [ str , Any ], md : Markdown , classes : list [ str ] | None = None , id_value : str = \"\" , attrs : dict [ str , Any ] | None = None , ** kwargs : Any , ) -> str : \"\"\"Execute code and return HTML. Parameters: source: The code to execute. language: The code language, like python or bash. css_class: The CSS class to add to the HTML element. options: The container for options. attrs: The container for attrs: md: The Markdown instance. classes: Additional CSS classes. id_value: An optional HTML id. attrs: Additional attributes **kwargs: Additional arguments passed to SuperFences default formatters. Returns: HTML contents. \"\"\" fmt = formatters . get ( language , lambda source , * args , ** kwargs : source ) return fmt ( source , md , ** options ) # type: ignore[operator]","title":"formatter()"},{"location":"reference/markdown_exec/#markdown_exec.validator","text":"Validate code blocks inputs. Parameters: Name Type Description Default language str The code language, like python or bash. required inputs dict [ str , str ] The code block inputs, to be sorted into options and attrs. required options dict [ str , Any ] The container for options. required attrs dict [ str , Any ] The container for attrs: required md Markdown The Markdown instance. required Returns: Type Description bool Success or not. Source code in markdown_exec/__init__.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def validator ( language : str , inputs : dict [ str , str ], options : dict [ str , Any ], attrs : dict [ str , Any ], md : Markdown ) -> bool : \"\"\"Validate code blocks inputs. Parameters: language: The code language, like python or bash. inputs: The code block inputs, to be sorted into options and attrs. options: The container for options. attrs: The container for attrs: md: The Markdown instance. Returns: Success or not. \"\"\" exec_value = _to_bool ( inputs . pop ( \"exec\" , \"no\" )) if language != \"tree\" and not exec_value : return False html_value = _to_bool ( inputs . pop ( \"html\" , \"no\" )) source_value = inputs . pop ( \"source\" , \"\" ) result_value = inputs . pop ( \"result\" , \"\" ) tabs_value = inputs . pop ( \"tabs\" , \"Source|Result\" ) tabs = tuple ( _tabs_re . split ( tabs_value , maxsplit = 1 )) options [ \"exec\" ] = exec_value options [ \"html\" ] = html_value options [ \"source\" ] = source_value options [ \"result\" ] = result_value options [ \"tabs\" ] = tabs options [ \"extra\" ] = inputs return True","title":"validator()"},{"location":"reference/markdown_exec/logger/","text":"This module contains logging utilities. We provide the patch_loggers function so dependant libraries can patch loggers as they see fit. For example, to fit in the MkDocs logging configuration and prefix each log message with the module name: import logging from markdown_exec.logger import patch_loggers class LoggerAdapter ( logging . LoggerAdapter ): def __init__ ( self , prefix , logger ): super () . __init__ ( logger , {}) self . prefix = prefix def process ( self , msg , kwargs ): return f \" { self . prefix } : { msg } \" , kwargs def get_logger ( name ): logger = logging . getLogger ( f \"mkdocs.plugins. { name } \" ) return LoggerAdapter ( name . split ( \".\" , 1 )[ 0 ], logger ) patch_loggers ( get_logger ) get_logger ( name ) \u00a4 Create and return a new logger instance. Parameters: Name Type Description Default name str The logger name. required Returns: Type Description _Logger The logger. Source code in markdown_exec/logger.py 61 62 63 64 65 66 67 68 69 70 def get_logger ( name : str ) -> _Logger : \"\"\"Create and return a new logger instance. Parameters: name: The logger name. Returns: The logger. \"\"\" return _Logger ( name ) patch_loggers ( get_logger_func ) \u00a4 Patch loggers. Parameters: Name Type Description Default get_logger_func Callable [[ str ], Any ] A function accepting a name as parameter and returning a logger. required Source code in markdown_exec/logger.py 73 74 75 76 77 78 79 def patch_loggers ( get_logger_func : Callable [[ str ], Any ]) -> None : \"\"\"Patch loggers. Parameters: get_logger_func: A function accepting a name as parameter and returning a logger. \"\"\" _Logger . _patch_loggers ( get_logger_func ) # noqa: WPS437","title":"logger"},{"location":"reference/markdown_exec/logger/#markdown_exec.logger.get_logger","text":"Create and return a new logger instance. Parameters: Name Type Description Default name str The logger name. required Returns: Type Description _Logger The logger. Source code in markdown_exec/logger.py 61 62 63 64 65 66 67 68 69 70 def get_logger ( name : str ) -> _Logger : \"\"\"Create and return a new logger instance. Parameters: name: The logger name. Returns: The logger. \"\"\" return _Logger ( name )","title":"get_logger()"},{"location":"reference/markdown_exec/logger/#markdown_exec.logger.patch_loggers","text":"Patch loggers. Parameters: Name Type Description Default get_logger_func Callable [[ str ], Any ] A function accepting a name as parameter and returning a logger. required Source code in markdown_exec/logger.py 73 74 75 76 77 78 79 def patch_loggers ( get_logger_func : Callable [[ str ], Any ]) -> None : \"\"\"Patch loggers. Parameters: get_logger_func: A function accepting a name as parameter and returning a logger. \"\"\" _Logger . _patch_loggers ( get_logger_func ) # noqa: WPS437","title":"patch_loggers()"},{"location":"reference/markdown_exec/mkdocs_plugin/","text":"This module contains an optional plugin for MkDocs. MarkdownExecPlugin \u00a4 Bases: BasePlugin MkDocs plugin to easily enable custom fences for code blocks execution.","title":"mkdocs_plugin"},{"location":"reference/markdown_exec/mkdocs_plugin/#markdown_exec.mkdocs_plugin.MarkdownExecPlugin","text":"Bases: BasePlugin MkDocs plugin to easily enable custom fences for code blocks execution.","title":"MarkdownExecPlugin"},{"location":"reference/markdown_exec/rendering/","text":"Markdown extensions and helpers. MarkdownConverter ( md ) \u00a4 Helper class to avoid breaking the original Markdown instance state. Source code in markdown_exec/rendering.py 150 151 def __init__ ( self , md : Markdown ) -> None : # noqa: D107 self . _md_ref : Markdown = md convert ( text , stash = None ) \u00a4 Convert Markdown text to safe HTML. Parameters: Name Type Description Default text str Markdown text. required stash dict [ str , str ] | None An HTML stash. None Returns: Type Description Markup Safe HTML. Source code in markdown_exec/rendering.py 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def convert ( self , text : str , stash : dict [ str , str ] | None = None ) -> Markup : \"\"\"Convert Markdown text to safe HTML. Parameters: text: Markdown text. stash: An HTML stash. Returns: Safe HTML. \"\"\" md = _mimic ( self . _md_ref ) # prepare for conversion md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = f \"exec- { MarkdownConverter . counter } --\" MarkdownConverter . counter += 1 try : # noqa: WPS501 converted = md . convert ( text ) finally : md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = \"\" # restore html from stash for placeholder , stashed in ( stash or {}) . items (): converted = converted . replace ( placeholder , stashed ) return Markup ( converted ) add_source ( * , source , location , output , language , tabs , ** extra ) \u00a4 Add source code block to the output. Parameters: Name Type Description Default source str The source code block. required location str Where to add the source (above, below, tabbed-left, tabbed-right, console). required output str The current output. required language str The code language. required tabs tuple [ str , str ] Tabs titles (if used). required **extra str Extra options added back to source code block. {} Raises: Type Description ValueError When the given location is not supported. Returns: Type Description str The updated output. Source code in markdown_exec/rendering.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def add_source ( # noqa: WPS212 * , source : str , location : str , output : str , language : str , tabs : tuple [ str , str ], ** extra : str , ) -> str : \"\"\"Add source code block to the output. Parameters: source: The source code block. location: Where to add the source (above, below, tabbed-left, tabbed-right, console). output: The current output. language: The code language. tabs: Tabs titles (if used). **extra: Extra options added back to source code block. Raises: ValueError: When the given location is not supported. Returns: The updated output. \"\"\" source = _hide_lines ( source ) if location == \"console\" : return code_block ( language , source + \" \\n \" + output , ** extra ) source_block = code_block ( language , source , ** extra ) if location == \"above\" : return source_block + \" \\n\\n \" + output if location == \"below\" : return output + \" \\n\\n \" + source_block if location == \"material-block\" : # TODO: remove style once margins are fixed in Material for MkDocs style = 'style=\"margin-top: 0;\"' return source_block + f ' \\n\\n <div class=\"result\" { style } markdown=\"1\" > \\n\\n { output } \\n\\n </div>' source_tab_title , result_tab_title = tabs if location == \"tabbed-left\" : return tabbed (( source_tab_title , source_block ), ( result_tab_title , output )) if location == \"tabbed-right\" : return tabbed (( result_tab_title , output ), ( source_tab_title , source_block )) raise ValueError ( f \"unsupported location for sources: { location } \" ) code_block ( language , code , ** options ) \u00a4 Format code as a code block. Parameters: Name Type Description Default language str The code block language. required code str The source code to format. required **options str Additional options passed from the source, to add back to the generated code block. {} Returns: Type Description str The formatted code block. Source code in markdown_exec/rendering.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def code_block ( language : str , code : str , ** options : str ) -> str : \"\"\"Format code as a code block. Parameters: language: The code block language. code: The source code to format. **options: Additional options passed from the source, to add back to the generated code block. Returns: The formatted code block. \"\"\" opts = \" \" . join ( f ' { opt_name } =\" { opt_value } \"' for opt_name , opt_value in options . items ()) return f \"```````` { language } { opts } \\n { code } \\n ````````\" tabbed ( * tabs ) \u00a4 Format tabs using pymdownx.tabbed extension. Parameters: Name Type Description Default *tabs tuple [ str , str ] Tuples of strings: title and text. () Returns: Type Description str The formatted tabs. Source code in markdown_exec/rendering.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def tabbed ( * tabs : tuple [ str , str ]) -> str : \"\"\"Format tabs using `pymdownx.tabbed` extension. Parameters: *tabs: Tuples of strings: title and text. Returns: The formatted tabs. \"\"\" parts = [] for title , text in tabs : title = title . replace ( r \"\\|\" , \"|\" ) . strip () parts . append ( f '=== \" { title } \"' ) parts . append ( indent ( text , prefix = \" \" * 4 )) parts . append ( \"\" ) return \" \\n \" . join ( parts )","title":"rendering"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConverter","text":"Helper class to avoid breaking the original Markdown instance state. Source code in markdown_exec/rendering.py 150 151 def __init__ ( self , md : Markdown ) -> None : # noqa: D107 self . _md_ref : Markdown = md","title":"MarkdownConverter"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.MarkdownConverter.convert","text":"Convert Markdown text to safe HTML. Parameters: Name Type Description Default text str Markdown text. required stash dict [ str , str ] | None An HTML stash. None Returns: Type Description Markup Safe HTML. Source code in markdown_exec/rendering.py 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def convert ( self , text : str , stash : dict [ str , str ] | None = None ) -> Markup : \"\"\"Convert Markdown text to safe HTML. Parameters: text: Markdown text. stash: An HTML stash. Returns: Safe HTML. \"\"\" md = _mimic ( self . _md_ref ) # prepare for conversion md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = f \"exec- { MarkdownConverter . counter } --\" MarkdownConverter . counter += 1 try : # noqa: WPS501 converted = md . convert ( text ) finally : md . treeprocessors [ _IdPrependingTreeprocessor . name ] . id_prefix = \"\" # restore html from stash for placeholder , stashed in ( stash or {}) . items (): converted = converted . replace ( placeholder , stashed ) return Markup ( converted )","title":"convert()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.add_source","text":"Add source code block to the output. Parameters: Name Type Description Default source str The source code block. required location str Where to add the source (above, below, tabbed-left, tabbed-right, console). required output str The current output. required language str The code language. required tabs tuple [ str , str ] Tabs titles (if used). required **extra str Extra options added back to source code block. {} Raises: Type Description ValueError When the given location is not supported. Returns: Type Description str The updated output. Source code in markdown_exec/rendering.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def add_source ( # noqa: WPS212 * , source : str , location : str , output : str , language : str , tabs : tuple [ str , str ], ** extra : str , ) -> str : \"\"\"Add source code block to the output. Parameters: source: The source code block. location: Where to add the source (above, below, tabbed-left, tabbed-right, console). output: The current output. language: The code language. tabs: Tabs titles (if used). **extra: Extra options added back to source code block. Raises: ValueError: When the given location is not supported. Returns: The updated output. \"\"\" source = _hide_lines ( source ) if location == \"console\" : return code_block ( language , source + \" \\n \" + output , ** extra ) source_block = code_block ( language , source , ** extra ) if location == \"above\" : return source_block + \" \\n\\n \" + output if location == \"below\" : return output + \" \\n\\n \" + source_block if location == \"material-block\" : # TODO: remove style once margins are fixed in Material for MkDocs style = 'style=\"margin-top: 0;\"' return source_block + f ' \\n\\n <div class=\"result\" { style } markdown=\"1\" > \\n\\n { output } \\n\\n </div>' source_tab_title , result_tab_title = tabs if location == \"tabbed-left\" : return tabbed (( source_tab_title , source_block ), ( result_tab_title , output )) if location == \"tabbed-right\" : return tabbed (( result_tab_title , output ), ( source_tab_title , source_block )) raise ValueError ( f \"unsupported location for sources: { location } \" )","title":"add_source()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.code_block","text":"Format code as a code block. Parameters: Name Type Description Default language str The code block language. required code str The source code to format. required **options str Additional options passed from the source, to add back to the generated code block. {} Returns: Type Description str The formatted code block. Source code in markdown_exec/rendering.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def code_block ( language : str , code : str , ** options : str ) -> str : \"\"\"Format code as a code block. Parameters: language: The code block language. code: The source code to format. **options: Additional options passed from the source, to add back to the generated code block. Returns: The formatted code block. \"\"\" opts = \" \" . join ( f ' { opt_name } =\" { opt_value } \"' for opt_name , opt_value in options . items ()) return f \"```````` { language } { opts } \\n { code } \\n ````````\"","title":"code_block()"},{"location":"reference/markdown_exec/rendering/#markdown_exec.rendering.tabbed","text":"Format tabs using pymdownx.tabbed extension. Parameters: Name Type Description Default *tabs tuple [ str , str ] Tuples of strings: title and text. () Returns: Type Description str The formatted tabs. Source code in markdown_exec/rendering.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def tabbed ( * tabs : tuple [ str , str ]) -> str : \"\"\"Format tabs using `pymdownx.tabbed` extension. Parameters: *tabs: Tuples of strings: title and text. Returns: The formatted tabs. \"\"\" parts = [] for title , text in tabs : title = title . replace ( r \"\\|\" , \"|\" ) . strip () parts . append ( f '=== \" { title } \"' ) parts . append ( indent ( text , prefix = \" \" * 4 )) parts . append ( \"\" ) return \" \\n \" . join ( parts )","title":"tabbed()"},{"location":"reference/markdown_exec/formatters/","text":"This subpackage contains all the formatters.","title":"formatters"},{"location":"reference/markdown_exec/formatters/base/","text":"Generic formatter for executing code. base_format ( language , run , code , md , html , source , result , tabs , ** options ) \u00a4 Execute code and return HTML. Parameters: Name Type Description Default language str The code language. required run Callable Function that runs code and returns output. required code str The code to execute. required md Markdown The Markdown instance. required html bool Whether to inject output as HTML directly, without rendering. required source str Whether to show source as well, and where. required result str If provided, use as language to format result in a code block. required tabs tuple [ str , str ] Titles of tabs (if used). required **options Any Additional options passed from the formatter. {} Returns: Type Description Markup HTML contents. Source code in markdown_exec/formatters/base.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def base_format ( # noqa: WPS231 language : str , run : Callable , code : str , md : Markdown , html : bool , source : str , result : str , tabs : tuple [ str , str ], ** options : Any , ) -> Markup : \"\"\"Execute code and return HTML. Parameters: language: The code language. run: Function that runs code and returns output. code: The code to execute. md: The Markdown instance. html: Whether to inject output as HTML directly, without rendering. source: Whether to show source as well, and where. result: If provided, use as language to format result in a code block. tabs: Titles of tabs (if used). **options: Additional options passed from the formatter. Returns: HTML contents. \"\"\" markdown = MarkdownConverter ( md ) extra = options . get ( \"extra\" , {}) try : output = run ( code , ** extra ) except RuntimeError as error : logger . warning ( f \"Execution of { language } code block exited with non-zero status\" ) return markdown . convert ( str ( error )) if html : if source : placeholder = str ( uuid4 ()) wrapped_output = add_source ( source = code , location = source , output = placeholder , language = language , tabs = tabs , ** extra ) return markdown . convert ( wrapped_output , stash = { placeholder : output }) return Markup ( output ) wrapped_output = output if result : wrapped_output = code_block ( result , output ) if source : wrapped_output = add_source ( source = code , location = source , output = wrapped_output , language = language , tabs = tabs , ** extra ) return markdown . convert ( wrapped_output )","title":"base"},{"location":"reference/markdown_exec/formatters/base/#markdown_exec.formatters.base.base_format","text":"Execute code and return HTML. Parameters: Name Type Description Default language str The code language. required run Callable Function that runs code and returns output. required code str The code to execute. required md Markdown The Markdown instance. required html bool Whether to inject output as HTML directly, without rendering. required source str Whether to show source as well, and where. required result str If provided, use as language to format result in a code block. required tabs tuple [ str , str ] Titles of tabs (if used). required **options Any Additional options passed from the formatter. {} Returns: Type Description Markup HTML contents. Source code in markdown_exec/formatters/base.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def base_format ( # noqa: WPS231 language : str , run : Callable , code : str , md : Markdown , html : bool , source : str , result : str , tabs : tuple [ str , str ], ** options : Any , ) -> Markup : \"\"\"Execute code and return HTML. Parameters: language: The code language. run: Function that runs code and returns output. code: The code to execute. md: The Markdown instance. html: Whether to inject output as HTML directly, without rendering. source: Whether to show source as well, and where. result: If provided, use as language to format result in a code block. tabs: Titles of tabs (if used). **options: Additional options passed from the formatter. Returns: HTML contents. \"\"\" markdown = MarkdownConverter ( md ) extra = options . get ( \"extra\" , {}) try : output = run ( code , ** extra ) except RuntimeError as error : logger . warning ( f \"Execution of { language } code block exited with non-zero status\" ) return markdown . convert ( str ( error )) if html : if source : placeholder = str ( uuid4 ()) wrapped_output = add_source ( source = code , location = source , output = placeholder , language = language , tabs = tabs , ** extra ) return markdown . convert ( wrapped_output , stash = { placeholder : output }) return Markup ( output ) wrapped_output = output if result : wrapped_output = code_block ( result , output ) if source : wrapped_output = add_source ( source = code , location = source , output = wrapped_output , language = language , tabs = tabs , ** extra ) return markdown . convert ( wrapped_output )","title":"base_format()"},{"location":"reference/markdown_exec/formatters/bash/","text":"Formatter for executing shell code.","title":"bash"},{"location":"reference/markdown_exec/formatters/console/","text":"Formatter for executing shell console code.","title":"console"},{"location":"reference/markdown_exec/formatters/markdown/","text":"Formatter for literate Markdown.","title":"markdown"},{"location":"reference/markdown_exec/formatters/pycon/","text":"Formatter for executing pycon code.","title":"pycon"},{"location":"reference/markdown_exec/formatters/python/","text":"Formatter for executing Python code.","title":"python"},{"location":"reference/markdown_exec/formatters/sh/","text":"Formatter for executing shell code.","title":"sh"},{"location":"reference/markdown_exec/formatters/tree/","text":"Formatter for file-system trees.","title":"tree"},{"location":"usage/","text":"Usage \u00a4 HTML vs. Markdown \u00a4 By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the html option to true. HTML Example: Markdown Rendered System information: ```python exec=\"true\" html=\"true\" import platform print( f\"\"\" <ul> <li>machine: <code>{platform.machine()}</code></li> <li>version: <code>{platform.version()}</code></li> <li>platform: <code>{platform.platform()}</code></li> <li>system: <code>{platform.system()}</code></li> </ul> \"\"\" ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000 platform: Linux-6.0.8-arch1-1-x86_64-with-glibc2.35 system: Linux Markdown Example: Markdown Rendered System information: ```python exec=\"true\" import platform from textwrap import dedent print( # we must dedent, otherwise Markdown # will render it as a code block! dedent( f\"\"\" - machine: `{platform.machine()}` - version: `{platform.version()}` - platform: `{platform.platform()}` - system: `{platform.system()}` \"\"\" ) ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000 platform: Linux-6.0.8-arch1-1-x86_64-with-glibc2.35 system: Linux Render the source code as well \u00a4 It's possible to render both the result of the executed code block and the code block itself. For this, use the source option with one of the following values: above : The source code will be rendered above the result. below : The source code will be rendered below the result. material-block : The source code and result will be wrapped in a nice-looking block (only works with Material for MkDocs). tabbed-left : The source code and result will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). tabbed-right : The result and source code will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). console : The source and result are concatenated in a single code block, like an interactive console session. Source above: Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Source below: Markdown Rendered ```python exec=\"true\" source=\"below\" print(\"I'm the result!\") ``` I'm the result! print ( \"I'm the result!\" ) Material block: Markdown Rendered ```python exec=\"true\" source=\"material-block\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Tabbed on the left: Markdown Rendered ```python exec=\"true\" source=\"tabbed-left\" print(\"I'm the result!\") ``` Source Result print ( \"I'm the result!\" ) I'm the result! Tabbed on the right: Markdown Rendered ```python exec=\"true\" source=\"tabbed-right\" print(\"I'm the result!\") ``` Result Source I'm the result! print ( \"I'm the result!\" ) Console (best used with actual session syntax like pycon or console ) : Markdown Rendered ```pycon exec=\"true\" source=\"console\" >>> print(\"I'm the result!\") I'm not the result... ``` >>> print ( \"I'm the result!\" ) I'm the result! Hiding lines from the source \u00a4 Every line that contains the string markdown-exec: hide will be hidden from the displayed source. Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"Hello World!\") print(\"<hr>\") # markdown-exec: hide ``` print ( \"Hello World!\" ) Hello World! Change the titles of tabs \u00a4 In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the tabs option: Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\" print(\"I'm the result!\") ``` Source code Output print ( \"I'm the result!\" ) I'm the result! As you can see, titles are separated with a pipe | . Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with \\| : Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\| b | Boolean matrix\" print() print(\"a | b | a \\\\|\\\\| b\") print(\"--- | --- | ---\") for a in (True, False): for b in (True, False): print(f\"{a} | {b} | {a or b}\") print() ``` OR operator: a || b Boolean matrix print () print ( \"a | b | a \\\\ | \\\\ | b\" ) print ( \"--- | --- | ---\" ) for a in ( True , False ): for b in ( True , False ): print ( f \" { a } | { b } | { a or b } \" ) print () a b a || b True True True True False True False True True False False False Important The tabs option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well. Limitation Changing the title for only one tab is not supported. Wrap result in a code block \u00a4 You can wrap the result in a code block by specifying a code block language: Markdown Rendered ```console exec=\"1\" result=\"json\" $ pdm info --env ``` { \"implementation_name\" : \"cpython\" , \"implementation_version\" : \"3.8.13\" , \"os_name\" : \"posix\" , \"platform_machine\" : \"x86_64\" , \"platform_release\" : \"6.0.8-arch1-1\" , \"platform_system\" : \"Linux\" , \"platform_version\" : \"#1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000\" , \"python_full_version\" : \"3.8.13\" , \"platform_python_implementation\" : \"CPython\" , \"python_version\" : \"3.8\" , \"sys_platform\" : \"linux\" } Limitation Wrapping the result is not possible when HTML output is enabled, nor when source and output are concatenated with the \"console\" style. Additional options \u00a4 If you are using Material for MkDocs , you are probably familiar with the title option on code blocks: ```python title=\"setup.py\" from setuptools import setup setup(...) ``` Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally. Example: Markdown Rendered ```python exec=\"1\" source=\"above\" title=\"source.py\" print(\"I'm the result!\") ``` source.py print ( \"I'm the result!\" ) I'm the result! Literate Markdown \u00a4 With this extension, it is also possible to write \"literate programming\" Markdown. From Wikipedia : Literate programming (LP) tools are used to obtain two representations from a source file: one understandable by a compiler or interpreter, the \"tangled\" code, and another for viewing as formatted documentation, which is said to be \"woven\" from the literate source. We effectively support executing multiple nested code blocks to generate complex output. That makes for a very meta-markdown markup: Source Result ```md exec=\"1\" source=\"material-block\" title=\"Markdown link\" [ Link to example.com ]( https://example.com ) ``` Markdown link [ Link to example.com ]( https://example.com ) Link to example.com So power, such meta The above example (both tabs) was entirely generated using a literate code block in a literate code block \ud83e\udd2f: ````md exec=\"1\" source=\"tabbed-left\" ```md exec=\"1\" source=\"material-block\" title=\"Markdown link\" [ Link to example.com ]( https://example.com ) ``` ```` In fact, all the examples on this page were generated using this method! Check out the source here: https://github.com/pawamoy/markdown-exec/blob/master/docs/usage.md (click on \"Raw\" to see the code blocks execution options). Of course \"executing\" Markdown (or rather, making it \"literate\") only makes sense when the source is shown as well.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#html-vs-markdown","text":"By default, Markdown Exec will render what you print as Markdown. If you want to skip rendering, to inject HTML directly, you can set the html option to true. HTML Example: Markdown Rendered System information: ```python exec=\"true\" html=\"true\" import platform print( f\"\"\" <ul> <li>machine: <code>{platform.machine()}</code></li> <li>version: <code>{platform.version()}</code></li> <li>platform: <code>{platform.platform()}</code></li> <li>system: <code>{platform.system()}</code></li> </ul> \"\"\" ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000 platform: Linux-6.0.8-arch1-1-x86_64-with-glibc2.35 system: Linux Markdown Example: Markdown Rendered System information: ```python exec=\"true\" import platform from textwrap import dedent print( # we must dedent, otherwise Markdown # will render it as a code block! dedent( f\"\"\" - machine: `{platform.machine()}` - version: `{platform.version()}` - platform: `{platform.platform()}` - system: `{platform.system()}` \"\"\" ) ) ``` System information: machine: x86_64 version: #1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000 platform: Linux-6.0.8-arch1-1-x86_64-with-glibc2.35 system: Linux","title":"HTML vs. Markdown"},{"location":"usage/#render-the-source-code-as-well","text":"It's possible to render both the result of the executed code block and the code block itself. For this, use the source option with one of the following values: above : The source code will be rendered above the result. below : The source code will be rendered below the result. material-block : The source code and result will be wrapped in a nice-looking block (only works with Material for MkDocs). tabbed-left : The source code and result will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). tabbed-right : The result and source code will be rendered in tabs, in that order (remember to enable the pymdownx.tabbed extension). console : The source and result are concatenated in a single code block, like an interactive console session. Source above: Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Source below: Markdown Rendered ```python exec=\"true\" source=\"below\" print(\"I'm the result!\") ``` I'm the result! print ( \"I'm the result!\" ) Material block: Markdown Rendered ```python exec=\"true\" source=\"material-block\" print(\"I'm the result!\") ``` print ( \"I'm the result!\" ) I'm the result! Tabbed on the left: Markdown Rendered ```python exec=\"true\" source=\"tabbed-left\" print(\"I'm the result!\") ``` Source Result print ( \"I'm the result!\" ) I'm the result! Tabbed on the right: Markdown Rendered ```python exec=\"true\" source=\"tabbed-right\" print(\"I'm the result!\") ``` Result Source I'm the result! print ( \"I'm the result!\" ) Console (best used with actual session syntax like pycon or console ) : Markdown Rendered ```pycon exec=\"true\" source=\"console\" >>> print(\"I'm the result!\") I'm not the result... ``` >>> print ( \"I'm the result!\" ) I'm the result!","title":"Render the source code as well"},{"location":"usage/#hiding-lines-from-the-source","text":"Every line that contains the string markdown-exec: hide will be hidden from the displayed source. Markdown Rendered ```python exec=\"true\" source=\"above\" print(\"Hello World!\") print(\"<hr>\") # markdown-exec: hide ``` print ( \"Hello World!\" ) Hello World!","title":"Hiding lines from the source"},{"location":"usage/#change-the-titles-of-tabs","text":"In the previous example, we didn't specify any title for tabs, so Markdown Exec used \"Source\" and \"Result\" by default. You can customize the titles with the tabs option: Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"Source code|Output\" print(\"I'm the result!\") ``` Source code Output print ( \"I'm the result!\" ) I'm the result! As you can see, titles are separated with a pipe | . Both titles are stripped so you can add space around the pipe. If you need to use that character in a title, simply escape it with \\| : Markdown Rendered ```python exec=\"1\" source=\"tabbed-left\" tabs=\"OR operator: a \\|\\| b | Boolean matrix\" print() print(\"a | b | a \\\\|\\\\| b\") print(\"--- | --- | ---\") for a in (True, False): for b in (True, False): print(f\"{a} | {b} | {a or b}\") print() ``` OR operator: a || b Boolean matrix print () print ( \"a | b | a \\\\ | \\\\ | b\" ) print ( \"--- | --- | ---\" ) for a in ( True , False ): for b in ( True , False ): print ( f \" { a } | { b } | { a or b } \" ) print () a b a || b True True True True False True False True True False False False Important The tabs option always expects the \"Source\" tab title first, and the \"Result\" tab title second. It allows to switch from tabbed-left to tabbed-right and inversely without having to switch the titles as well. Limitation Changing the title for only one tab is not supported.","title":"Change the titles of tabs"},{"location":"usage/#wrap-result-in-a-code-block","text":"You can wrap the result in a code block by specifying a code block language: Markdown Rendered ```console exec=\"1\" result=\"json\" $ pdm info --env ``` { \"implementation_name\" : \"cpython\" , \"implementation_version\" : \"3.8.13\" , \"os_name\" : \"posix\" , \"platform_machine\" : \"x86_64\" , \"platform_release\" : \"6.0.8-arch1-1\" , \"platform_system\" : \"Linux\" , \"platform_version\" : \"#1 SMP PREEMPT_DYNAMIC Thu, 10 Nov 2022 21:14:24 +0000\" , \"python_full_version\" : \"3.8.13\" , \"platform_python_implementation\" : \"CPython\" , \"python_version\" : \"3.8\" , \"sys_platform\" : \"linux\" } Limitation Wrapping the result is not possible when HTML output is enabled, nor when source and output are concatenated with the \"console\" style.","title":"Wrap result in a code block"},{"location":"usage/#additional-options","text":"If you are using Material for MkDocs , you are probably familiar with the title option on code blocks: ```python title=\"setup.py\" from setuptools import setup setup(...) ``` Markdown Exec will add back these unrecognized options when rendering the source, so you can keep using them normally. Example: Markdown Rendered ```python exec=\"1\" source=\"above\" title=\"source.py\" print(\"I'm the result!\") ``` source.py print ( \"I'm the result!\" ) I'm the result!","title":"Additional options"},{"location":"usage/#literate-markdown","text":"With this extension, it is also possible to write \"literate programming\" Markdown. From Wikipedia : Literate programming (LP) tools are used to obtain two representations from a source file: one understandable by a compiler or interpreter, the \"tangled\" code, and another for viewing as formatted documentation, which is said to be \"woven\" from the literate source. We effectively support executing multiple nested code blocks to generate complex output. That makes for a very meta-markdown markup: Source Result ```md exec=\"1\" source=\"material-block\" title=\"Markdown link\" [ Link to example.com ]( https://example.com ) ``` Markdown link [ Link to example.com ]( https://example.com ) Link to example.com So power, such meta The above example (both tabs) was entirely generated using a literate code block in a literate code block \ud83e\udd2f: ````md exec=\"1\" source=\"tabbed-left\" ```md exec=\"1\" source=\"material-block\" title=\"Markdown link\" [ Link to example.com ]( https://example.com ) ``` ```` In fact, all the examples on this page were generated using this method! Check out the source here: https://github.com/pawamoy/markdown-exec/blob/master/docs/usage.md (click on \"Raw\" to see the code blocks execution options). Of course \"executing\" Markdown (or rather, making it \"literate\") only makes sense when the source is shown as well.","title":"Literate Markdown"},{"location":"usage/python/","text":"Python \u00a4 Python console code \u00a4 Code blocks syntax-highlighted with the pycon identifier are also supported. These code blocks will be pre-processed to keep only the lines starting with >>> , and the chevrons (prompt) will be removed from these lines, so we can execute them. Markdown Rendered ```pycon exec=\"1\" source=\"console\" >>> print(\"I'm the result!\") I'm not the result... ``` >>> print ( \"I'm the result!\" ) I'm the result! It also means that multiple blocks of instructions will be concatenated, as well as their output: Markdown Rendered ```pycon exec=\"1\" source=\"console\" >>> name = \"Baron\" >>> print(name) Baron >>> age = \"???\" >>> print(age) ??? ``` >>> name = \"Baron\" >>> print ( name ) >>> age = \"???\" >>> print ( age ) Baron ???","title":"Python"},{"location":"usage/python/#python","text":"","title":"Python"},{"location":"usage/python/#python-console-code","text":"Code blocks syntax-highlighted with the pycon identifier are also supported. These code blocks will be pre-processed to keep only the lines starting with >>> , and the chevrons (prompt) will be removed from these lines, so we can execute them. Markdown Rendered ```pycon exec=\"1\" source=\"console\" >>> print(\"I'm the result!\") I'm not the result... ``` >>> print ( \"I'm the result!\" ) I'm the result! It also means that multiple blocks of instructions will be concatenated, as well as their output: Markdown Rendered ```pycon exec=\"1\" source=\"console\" >>> name = \"Baron\" >>> print(name) Baron >>> age = \"???\" >>> print(age) ??? ``` >>> name = \"Baron\" >>> print ( name ) >>> age = \"???\" >>> print ( age ) Baron ???","title":"Python console code"},{"location":"usage/shell/","text":"Shell \u00a4 Shell code blocks are executed using the same interpreter specified as language of the code block, in sub-processes. The output is captured and rendered as Markdown or HTML (see Usage ). Bash \u00a4 Markdown Rendered ```bash exec=\"1\" source=\"material-block\" echo $BASH_VERSION ``` echo $BASH_VERSION 5.1.16(1)-release Console \u00a4 Markdown Rendered ```console exec=\"1\" source=\"console\" $ mkdocs --help ``` $ mkdocs --help Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server sh \u00a4 Markdown Rendered ```sh exec=\"1\" source=\"material-block\" echo Markdown is **cool** ``` echo Markdown is **cool** Markdown is cool","title":"Shell"},{"location":"usage/shell/#shell","text":"Shell code blocks are executed using the same interpreter specified as language of the code block, in sub-processes. The output is captured and rendered as Markdown or HTML (see Usage ).","title":"Shell"},{"location":"usage/shell/#bash","text":"Markdown Rendered ```bash exec=\"1\" source=\"material-block\" echo $BASH_VERSION ``` echo $BASH_VERSION 5.1.16(1)-release","title":"Bash"},{"location":"usage/shell/#console","text":"Markdown Rendered ```console exec=\"1\" source=\"console\" $ mkdocs --help ``` $ mkdocs --help Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"Console"},{"location":"usage/shell/#sh","text":"Markdown Rendered ```sh exec=\"1\" source=\"material-block\" echo Markdown is **cool** ``` echo Markdown is **cool** Markdown is cool","title":"sh"},{"location":"usage/tree/","text":"Tree \u00a4 Markdown Exec provides a tree formatter that can be used to render file-system trees easily: Markdown Rendered ```tree root1 file1 dir1 file dir2 file1 file2 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 By default, the language used for syntax highlight is bash . It means you can add comments with # : Markdown Rendered ```tree root1 # comment 1 file1 dir1 file dir2 file1 # comment 2 file2 # comment 3 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 # comment 1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 # comment 2 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 # comment 3 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 You can change the syntax highlight language with the result option: Markdown Rendered ```tree result=\"javascript\" root1 // comment 1 file1 dir1 file dir2 file1 // comment 2 file2 // comment 3 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 // comment 1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 // comment 2 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 // comment 3 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 You can force an entry to be displayed as a directory instead of a regular file by appending a trailing slash to the name: Markdown Rendered ```tree root1 dir1/ dir2/ dir3/ ``` \ud83d\udcc1 root1 \u251c\u2500\u2500 \ud83d\udcc1 dir1/ \u251c\u2500\u2500 \ud83d\udcc1 dir2/ \u2514\u2500\u2500 \ud83d\udcc1 dir3/ It is recommended to always append trailing slashes to directory anyway. Limitation Spaces in file names are not supported when searching for a trailing slash.","title":"Tree"},{"location":"usage/tree/#tree","text":"Markdown Exec provides a tree formatter that can be used to render file-system trees easily: Markdown Rendered ```tree root1 file1 dir1 file dir2 file1 file2 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 By default, the language used for syntax highlight is bash . It means you can add comments with # : Markdown Rendered ```tree root1 # comment 1 file1 dir1 file dir2 file1 # comment 2 file2 # comment 3 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 # comment 1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 # comment 2 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 # comment 3 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 You can change the syntax highlight language with the result option: Markdown Rendered ```tree result=\"javascript\" root1 // comment 1 file1 dir1 file dir2 file1 // comment 2 file2 // comment 3 file2 file3 root2 file1 ``` \ud83d\udcc1 root1 // comment 1 \u251c\u2500\u2500 \ud83d\udcc4 file1 \u251c\u2500\u2500 \ud83d\udcc1 dir1 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file \u251c\u2500\u2500 \ud83d\udcc1 dir2 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 file1 // comment 2 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 file2 // comment 3 \u251c\u2500\u2500 \ud83d\udcc4 file2 \u2514\u2500\u2500 \ud83d\udcc4 file3 \ud83d\udcc1 root2 \u2514\u2500\u2500 \ud83d\udcc4 file1 You can force an entry to be displayed as a directory instead of a regular file by appending a trailing slash to the name: Markdown Rendered ```tree root1 dir1/ dir2/ dir3/ ``` \ud83d\udcc1 root1 \u251c\u2500\u2500 \ud83d\udcc1 dir1/ \u251c\u2500\u2500 \ud83d\udcc1 dir2/ \u2514\u2500\u2500 \ud83d\udcc1 dir3/ It is recommended to always append trailing slashes to directory anyway. Limitation Spaces in file names are not supported when searching for a trailing slash.","title":"Tree"},{"location":"coverage/","text":"article h1, article > a, .md-sidebar--secondary { display: none !important; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}